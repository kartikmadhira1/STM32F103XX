
enc_final.elf:     file format elf32-littlearm
enc_final.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800010d

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00000738 memsz 0x00000738 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x20000000 align 2**15
         filesz 0x00000000 memsz 0x00000114 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   000001e8  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  080001e8  080001e8  000081e8  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000054c  080001ec  080001ec  000081ec  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000014  20000000  20000000  00010000  2**2  ALLOC
  4 ._check_stack 00000100  20000014  20000014  00010000  2**0  ALLOC
  5 .comment      00000070  00000000  00000000  00008738  2**0  CONTENTS, READONLY
  6 .ARM.attributes 00000033  00000000  00000000  000087a8  2**0  CONTENTS, READONLY
  7 .debug_aranges 00000338  00000000  00000000  000087db  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001f4b  00000000  00000000  00008b13  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000009bb  00000000  00000000  0000aa5e  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000223a  00000000  00000000  0000b419  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000090c  00000000  00000000  0000d654  2**2  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0004e8ea  00000000  00000000  0000df60  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002b8  00000000  00000000  0005c84a  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000d14f  00000000  00000000  0005cb02  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001e8 l    d  ._inits	00000000 ._inits
080001ec l    d  .text	00000000 .text
20000000 l    d  .bss	00000000 .bss
20000014 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f10x.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f10x_exti.c
00000000 l    df *ABS*	00000000 stm32f10x_gpio.c
00000000 l    df *ABS*	00000000 stm32f10x_rcc.c
00000000 l    df *ABS*	00000000 startup_stm32f10x.c
00000000 l    df *ABS*	00000000 system_stm32f10x.c
0800062c l     F .text	0000000a SetSysClock
08000638 l     F .text	00000100 SetSysClockTo72
00000000 l    df *ABS*	00000000 
20004c00 l       *ABS*	00000000 _Heap_Limit
00000400 l       *ABS*	00000000 _Main_Stack_Size
08000738 l       .text	00000000 __exidx_end
20000014 l       ._check_stack	00000000 _Heap_Begin
08000738 l       .bss	00000000 _etext
20004c00 l       *ABS*	00000000 __Main_Stack_Limit
080001ec l       ._inits	00000000 __fini_array_end
08000738 l       .text	00000000 __exidx_start
00000400 l       *ABS*	00000000 __Main_Stack_Size
00000100 l       *ABS*	00000000 _Minimum_Stack_Size
20000014 l       ._check_stack	00000000 _end_noinit
080001ec l       ._inits	00000000 __fini_array_start
080001ec l       ._inits	00000000 __init_array_end
080001ec l       ._inits	00000000 __preinit_array_end
20005000 l       *ABS*	00000000 __stack
080001ec l       ._inits	00000000 __init_array_start
080001e8 l       ._inits	00000000 __preinit_array_start
08000198  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI2_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_TRG_COM_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
080001d0  w    F .isr_vector	00000006 DebugMon_Handler
080001e8 g     O ._inits	00000004 p_system_init
20000000 g       .text	00000000 __data_start__
08000198  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
080001a8  w    F .isr_vector	00000006 HardFault_Handler
08000198  w    F .isr_vector	00000006 TIM6_IRQHandler
080001e0  w    F .isr_vector	00000006 SysTick_Handler
08000198  w    F .isr_vector	00000006 PVD_IRQHandler
08000198  w    F .isr_vector	00000006 SDIO_IRQHandler
08000738 g       .bss	00000000 _sidata
080001d8  w    F .isr_vector	00000006 PendSV_Handler
080001a0  w    F .isr_vector	00000006 NMI_Handler
08000150 g     F .isr_vector	00000048 system_init
08000198  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI3_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
20000000 g       .bss	00000000 _sbss
08000198  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI0_IRQHandler
08000198  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
20000014 g       ._check_stack	00000000 _noinit
08000198  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_UP_TIM16_IRQHandler
080001c0  w    F .isr_vector	00000006 UsageFault_Handler
080004d4 g     F .text	0000003c RCC_APB2PeriphClockCmd
08000198  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
08000198  w    F .isr_vector	00000006 ADC1_2_IRQHandler
20000000 g       .bss	00000000 __bss_start__
20000000 g       .text	00000000 _sdata
08000198  w    F .isr_vector	00000006 SPI1_IRQHandler
08000198  w    F .isr_vector	00000006 TAMPER_IRQHandler
08000198  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
08000198  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_UP_IRQHandler
08000510 g     F .text	0000006c __libc_init_array
08000198  w    F .isr_vector	00000006 DMA2_Channel2_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel4_IRQHandler
08000198  w    F .isr_vector	00000006 USART3_IRQHandler
08000420 g     F .text	0000001c EXTI_ClearITPendingBit
0800057c g     F .text	0000003c __libc_fini_array
08000198  w    F .isr_vector	00000006 RTC_IRQHandler
20000014 g       .bss	00000000 _ebss
08000198  w    F .isr_vector	00000006 DMA1_Channel7_IRQHandler
0800010c  w    F .isr_vector	00000044 Reset_Handler
08000198  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
08000198  w    F .isr_vector	00000006 UART5_IRQHandler
08000198  w    F .isr_vector	00000006 ADC3_IRQHandler
08000198  w    F .isr_vector	00000006 TIM4_IRQHandler
08000198  w    F .isr_vector	00000006 DMA2_Channel1_IRQHandler
08000198  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
20000000 g       .text	00000000 __data_end__
08000198  w    F .isr_vector	00000006 DMA1_Channel6_IRQHandler
08000198  w    F .isr_vector	00000006 UART4_IRQHandler
08000198  w    F .isr_vector	00000006 DMA2_Channel4_IRQHandler
20000014 g       .bss	00000000 __bss_end__
08000198  w    F .isr_vector	00000006 TIM3_IRQHandler
08000198  w    F .isr_vector	00000006 RCC_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_TRG_COM_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel1_IRQHandler
08000198  w    F .isr_vector	00000006 Default_Handler
08000198  w    F .isr_vector	00000006 CEC_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
08000198  w    F .isr_vector	00000006 TIM14_IRQHandler
08000198  w    F .isr_vector	00000006 TIM13_IRQHandler
080002fc g     F .text	000000dc EXTI_Init
0800043c g     F .text	0000001c GPIO_ResetBits
08000198  w    F .isr_vector	00000006 TIM12_IRQHandler
08000198  w    F .isr_vector	00000006 TIM7_IRQHandler
08000198  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
08000198  w    F .isr_vector	00000006 TIM5_IRQHandler
08000284 g     F .text	00000078 EXTI9_5_IRQHandler
08000458 g     F .text	0000007c GPIO_EXTILineConfig
08000198  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
080003d8 g     F .text	00000048 EXTI_GetITStatus
08000198  w    F .isr_vector	00000006 SPI2_IRQHandler
080001b0  w    F .isr_vector	00000006 MemManage_Handler
080001ec g     F .text	00000098 main
08000198  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
080001c8  w    F .isr_vector	00000006 SVC_Handler
08000198  w    F .isr_vector	00000006 DMA2_Channel5_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel5_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI4_IRQHandler
08000198  w    F .isr_vector	00000006 USB_LP_CAN1_RX0_IRQHandler
20000000 g     O .bss	00000004 nvic
080005c4 g     F .text	00000068 SystemInit
20000004 g     O .bss	00000004 count
08000198  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM17_IRQHandler
08000198  w    F .isr_vector	00000006 USB_HP_CAN1_TX_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel3_IRQHandler
08000198  w    F .isr_vector	00000006 FSMC_IRQHandler
08000198  w    F .isr_vector	00000006 ETH_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_UP_IRQHandler
08000198  w    F .isr_vector	00000006 WWDG_IRQHandler
08000198  w    F .isr_vector	00000006 TIM2_IRQHandler
08000198  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_BRK_IRQHandler
20005000 g       *ABS*	00000000 _estack
08000198  w    F .isr_vector	00000006 EXTI1_IRQHandler
20000008 g     O .bss	00000004 gpio
20000000 g       .text	00000000 _edata
08000198  w    F .isr_vector	00000006 DMA2_Channel4_5_IRQHandler
08000198  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	0000010c g_pfnVectors
08000198  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel2_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_BRK_IRQHandler
08000198  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
08000198  w    F .isr_vector	00000006 FLASH_IRQHandler
080005b8  w    F .text	0000000a _exit
2000000c g     O .bss	00000008 EXTI_struct
080001b8  w    F .isr_vector	00000006 BusFault_Handler
08000198  w    F .isr_vector	00000006 USART1_IRQHandler
08000198  w    F .isr_vector	00000006 OTG_FS_IRQHandler
08000198  w    F .isr_vector	00000006 SPI3_IRQHandler
08000198  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
08000198  w    F .isr_vector	00000006 USBWakeUp_IRQHandler
08000198  w    F .isr_vector	00000006 DMA2_Channel3_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
$d():
 8000000:	00 50 00 20 0d 01 00 08 a1 01 00 08 a9 01 00 08     .P. ............
 8000010:	b1 01 00 08 b9 01 00 08 c1 01 00 08 00 00 00 00     ................
	...
 800002c:	c9 01 00 08 d1 01 00 08 00 00 00 00 d9 01 00 08     ................
 800003c:	e1 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800004c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800005c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800006c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800007c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800008c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800009c:	85 02 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000ac:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000bc:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000cc:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000dc:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <Reset_Handler>:
Reset_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 800010c:	b580      	push	{r7, lr}
 800010e:	b084      	sub	sp, #16
 8000110:	af00      	add	r7, sp, #0
 8000112:	4b0d      	ldr	r3, [pc, #52]	; (8000148 <Reset_Handler+0x3c>)
 8000114:	60bb      	str	r3, [r7, #8]
 8000116:	4b0d      	ldr	r3, [pc, #52]	; (800014c <Reset_Handler+0x40>)
 8000118:	607b      	str	r3, [r7, #4]
bss_init():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 800011a:	68bb      	ldr	r3, [r7, #8]
 800011c:	603b      	str	r3, [r7, #0]
 800011e:	e004      	b.n	800012a <Reset_Handler+0x1e>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 8000120:	683b      	ldr	r3, [r7, #0]
 8000122:	1d1a      	adds	r2, r3, #4
 8000124:	603a      	str	r2, [r7, #0]
 8000126:	2200      	movs	r2, #0
 8000128:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 800012a:	687a      	ldr	r2, [r7, #4]
 800012c:	683b      	ldr	r3, [r7, #0]
 800012e:	429a      	cmp	r2, r3
 8000130:	d8f6      	bhi.n	8000120 <Reset_Handler+0x14>
Reset_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 8000132:	f000 f9ed 	bl	8000510 <__libc_init_array>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 8000136:	f000 f859 	bl	80001ec <__fini_array_end>
 800013a:	60f8      	str	r0, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 800013c:	f000 fa1e 	bl	800057c <__libc_fini_array>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 8000140:	68f8      	ldr	r0, [r7, #12]
 8000142:	f000 fa39 	bl	80005b8 <_exit>
 8000146:	bf00      	nop
 8000148:	20000000 	.word	0x20000000
 800014c:	20000014 	.word	0x20000014

08000150 <system_init>:
system_init():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	4b0d      	ldr	r3, [pc, #52]	; (800018c <system_init+0x3c>)
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	4b0d      	ldr	r3, [pc, #52]	; (8000190 <system_init+0x40>)
 800015c:	60bb      	str	r3, [r7, #8]
 800015e:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <system_init+0x44>)
 8000160:	607b      	str	r3, [r7, #4]
data_init():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	603b      	str	r3, [r7, #0]
 8000166:	e007      	b.n	8000178 <system_init+0x28>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 8000168:	683b      	ldr	r3, [r7, #0]
 800016a:	1d1a      	adds	r2, r3, #4
 800016c:	603a      	str	r2, [r7, #0]
 800016e:	68fa      	ldr	r2, [r7, #12]
 8000170:	1d11      	adds	r1, r2, #4
 8000172:	60f9      	str	r1, [r7, #12]
 8000174:	6812      	ldr	r2, [r2, #0]
 8000176:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	429a      	cmp	r2, r3
 800017e:	d8f3      	bhi.n	8000168 <system_init+0x18>
system_init():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 8000180:	f000 fa20 	bl	80005c4 <SystemInit>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:257
}
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	08000738 	.word	0x08000738
 8000190:	20000000 	.word	0x20000000
 8000194:	20000000 	.word	0x20000000

08000198 <ADC1_2_IRQHandler>:
Default_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:934
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:937 (discriminator 1)
  while (1)
    {
    }
 800019c:	e7fe      	b.n	800019c <ADC1_2_IRQHandler+0x4>
RTC_Alarm_IRQHandler():
 800019e:	bf00      	nop

080001a0 <NMI_Handler>:
NMI_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:946
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:949 (discriminator 1)
  while (1)
    {
    }
 80001a4:	e7fe      	b.n	80001a4 <NMI_Handler+0x4>
 80001a6:	bf00      	nop

080001a8 <HardFault_Handler>:
HardFault_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:954
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:957 (discriminator 1)
  while (1)
    {
    }
 80001ac:	e7fe      	b.n	80001ac <HardFault_Handler+0x4>
 80001ae:	bf00      	nop

080001b0 <MemManage_Handler>:
MemManage_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:962
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:965 (discriminator 1)
  while (1)
    {
    }
 80001b4:	e7fe      	b.n	80001b4 <MemManage_Handler+0x4>
 80001b6:	bf00      	nop

080001b8 <BusFault_Handler>:
BusFault_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:970
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:973 (discriminator 1)
  while (1)
    {
    }
 80001bc:	e7fe      	b.n	80001bc <BusFault_Handler+0x4>
 80001be:	bf00      	nop

080001c0 <UsageFault_Handler>:
UsageFault_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:978
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:981 (discriminator 1)
  while (1)
    {
    }
 80001c4:	e7fe      	b.n	80001c4 <UsageFault_Handler+0x4>
 80001c6:	bf00      	nop

080001c8 <SVC_Handler>:
SVC_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:986
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:989 (discriminator 1)
  while (1)
    {
    }
 80001cc:	e7fe      	b.n	80001cc <SVC_Handler+0x4>
 80001ce:	bf00      	nop

080001d0 <DebugMon_Handler>:
DebugMon_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:994
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:997 (discriminator 1)
  while (1)
    {
    }
 80001d4:	e7fe      	b.n	80001d4 <DebugMon_Handler+0x4>
 80001d6:	bf00      	nop

080001d8 <PendSV_Handler>:
PendSV_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1002
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1005 (discriminator 1)
  while (1)
    {
    }
 80001dc:	e7fe      	b.n	80001dc <PendSV_Handler+0x4>
 80001de:	bf00      	nop

080001e0 <SysTick_Handler>:
SysTick_Handler():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1010
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1013 (discriminator 1)
  while (1)
    {
    }
 80001e4:	e7fe      	b.n	80001e4 <SysTick_Handler+0x4>
 80001e6:	bf00      	nop

Disassembly of section .text:

080001ec <main>:
main():
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:26
//defining a InitStruct for external EXTI,GPIO, NVIC to capsulate all the features we need to set
GPIO_InitTypeDef gpio;
EXTI_InitTypeDef EXTI_struct;
NVIC_InitTypeDef nvic;
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:28

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 80001f0:	2008      	movs	r0, #8
 80001f2:	2101      	movs	r1, #1
 80001f4:	f000 f96e 	bl	80004d4 <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:30
//setting enable A, inputs 1 & 2 configurations
gpio.GPIO_Pin=(1<<GPIO_Pin_3 | 1<<GPIO_Pin_4 | ~(1<<GPIO_Pin_5));
 80001f8:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <__fini_array_end+0x8c>)
 80001fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001fe:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:31
gpio.GPIO_Mode=GPIO_Mode_Out_PP;
 8000200:	4b1d      	ldr	r3, [pc, #116]	; (8000278 <__fini_array_end+0x8c>)
 8000202:	2210      	movs	r2, #16
 8000204:	70da      	strb	r2, [r3, #3]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:32
gpio.GPIO_Speed=GPIO_Speed_2MHz;
 8000206:	4b1c      	ldr	r3, [pc, #112]	; (8000278 <__fini_array_end+0x8c>)
 8000208:	2202      	movs	r2, #2
 800020a:	709a      	strb	r2, [r3, #2]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:35


RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 800020c:	2004      	movs	r0, #4
 800020e:	2101      	movs	r1, #1
 8000210:	f000 f960 	bl	80004d4 <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:38
//First updating the external interrupt lines.
//The lines enable the interrupt in all the GPIOx.9 pins.
EXTI_struct.EXTI_Line=EXTI_Line9;
 8000214:	4b19      	ldr	r3, [pc, #100]	; (800027c <__fini_array_end+0x90>)
 8000216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800021a:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:40
//Mode are of two types- event and interrupt.
EXTI_struct.EXTI_Mode=EXTI_Mode_Interrupt;
 800021c:	4b17      	ldr	r3, [pc, #92]	; (800027c <__fini_array_end+0x90>)
 800021e:	2200      	movs	r2, #0
 8000220:	711a      	strb	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:42
//capturing the rising edge from the encoder ticks
EXTI_struct.EXTI_Trigger=EXTI_Trigger_Rising;
 8000222:	4b16      	ldr	r3, [pc, #88]	; (800027c <__fini_array_end+0x90>)
 8000224:	2208      	movs	r2, #8
 8000226:	715a      	strb	r2, [r3, #5]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:44
//specifing the states of pins.
EXTI_struct.EXTI_LineCmd=ENABLE;
 8000228:	4b14      	ldr	r3, [pc, #80]	; (800027c <__fini_array_end+0x90>)
 800022a:	2201      	movs	r2, #1
 800022c:	719a      	strb	r2, [r3, #6]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:46
//firing the struct
EXTI_Init(&EXTI_struct);
 800022e:	4813      	ldr	r0, [pc, #76]	; (800027c <__fini_array_end+0x90>)
 8000230:	f000 f864 	bl	80002fc <EXTI_Init>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:50

//enabling the gpio pin no PA8 for external interrupt and then
//connecting it to the line8 for EXTI8
RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
 8000234:	2001      	movs	r0, #1
 8000236:	2101      	movs	r1, #1
 8000238:	f000 f94c 	bl	80004d4 <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:52
//capsulating all the values in the gpio struct
gpio.GPIO_Pin=GPIO_Pin_9 ;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <__fini_array_end+0x8c>)
 800023e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000242:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:54
//the pin PA8 has to be externally pulled low or high.
gpio.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <__fini_array_end+0x8c>)
 8000246:	2204      	movs	r2, #4
 8000248:	70da      	strb	r2, [r3, #3]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:56
//setting the speed on the input.
gpio.GPIO_Speed=GPIO_Speed_2MHz;
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <__fini_array_end+0x8c>)
 800024c:	2202      	movs	r2, #2
 800024e:	709a      	strb	r2, [r3, #2]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:59

//Fusing both EXTI line 8 and pin PA8.
GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource9);
 8000250:	2000      	movs	r0, #0
 8000252:	2109      	movs	r1, #9
 8000254:	f000 f900 	bl	8000458 <GPIO_EXTILineConfig>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:63

//Setting up the vector handler functions
//capsulating all the values for the interrupt controller.
nvic.NVIC_IRQChannel=EXTI9_5_IRQn;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <__fini_array_end+0x94>)
 800025a:	2217      	movs	r2, #23
 800025c:	701a      	strb	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:64
nvic.NVIC_IRQChannelPreemptionPriority=0x00;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <__fini_array_end+0x94>)
 8000260:	2200      	movs	r2, #0
 8000262:	705a      	strb	r2, [r3, #1]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:65
nvic.NVIC_IRQChannelSubPriority=0x00;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <__fini_array_end+0x94>)
 8000266:	2200      	movs	r2, #0
 8000268:	709a      	strb	r2, [r3, #2]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:66
nvic.NVIC_IRQChannelCmd=ENABLE;
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <__fini_array_end+0x94>)
 800026c:	2201      	movs	r2, #1
 800026e:	70da      	strb	r2, [r3, #3]
 8000270:	2300      	movs	r3, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:68

	}
 8000272:	4618      	mov	r0, r3
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000008 	.word	0x20000008
 800027c:	2000000c 	.word	0x2000000c
 8000280:	20000000 	.word	0x20000000

08000284 <EXTI9_5_IRQHandler>:
EXTI9_5_IRQHandler():
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:74


//creating a sub-routine for the NVIC handler or the interrupt vector table.

void EXTI9_5_IRQHandler(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:76
	//getting the status of the interrupts
	if(EXTI_GetITStatus(EXTI_Line9))
 800028a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800028e:	f000 f8a3 	bl	80003d8 <EXTI_GetITStatus>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d028      	beq.n	80002ea <EXTI9_5_IRQHandler+0x66>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:79
	{	 //getting the value in the data register of GPIOA
		 //and ANDING with the pin number 8
		 if((GPIOA->IDR & GPIO_Pin_9))
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <EXTI9_5_IRQHandler+0x6c>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d005      	beq.n	80002b0 <EXTI9_5_IRQHandler+0x2c>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:81
		 {
			 count++;
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <EXTI9_5_IRQHandler+0x70>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1c5a      	adds	r2, r3, #1
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <EXTI9_5_IRQHandler+0x70>)
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	e004      	b.n	80002ba <EXTI9_5_IRQHandler+0x36>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:85
		 }
		 else
		 {
			count--;
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <EXTI9_5_IRQHandler+0x70>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <EXTI9_5_IRQHandler+0x70>)
 80002b8:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:87
		}
		 if (count==100)
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <EXTI9_5_IRQHandler+0x70>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b64      	cmp	r3, #100	; 0x64
 80002c0:	d10f      	bne.n	80002e2 <EXTI9_5_IRQHandler+0x5e>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:90
		 	{   //if counts become 100, we need to set the PC13 led number
		 		GPIO_InitTypeDef gpio;
		 		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 80002c2:	2010      	movs	r0, #16
 80002c4:	2101      	movs	r1, #1
 80002c6:	f000 f905 	bl	80004d4 <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:91
		 		gpio.GPIO_Pin=GPIO_Pin_13;
 80002ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ce:	80bb      	strh	r3, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:92
		 		gpio.GPIO_Mode=GPIO_Mode_Out_PP;
 80002d0:	2310      	movs	r3, #16
 80002d2:	71fb      	strb	r3, [r7, #7]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:93
		 		gpio.GPIO_Speed=GPIO_Speed_2MHz;
 80002d4:	2302      	movs	r3, #2
 80002d6:	71bb      	strb	r3, [r7, #6]
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:95
		 		//setting the pin high for the led
		 		GPIO_ResetBits(GPIOC,GPIO_Pin_13);
 80002d8:	4807      	ldr	r0, [pc, #28]	; (80002f8 <EXTI9_5_IRQHandler+0x74>)
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	f000 f8ad 	bl	800043c <GPIO_ResetBits>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:98
		 	}

		 EXTI_ClearITPendingBit(EXTI_Line9);
 80002e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e6:	f000 f89b 	bl	8000420 <EXTI_ClearITPendingBit>
/home/kartik/workspaceSTM32/enc_final/Debug/../src/main.c:100
	}
}
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010800 	.word	0x40010800
 80002f4:	20000004 	.word	0x20000004
 80002f8:	40011000 	.word	0x40011000

080002fc <EXTI_Init>:
EXTI_Init():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:102
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:103
  uint32_t tmp = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:111
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000308:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <EXTI_Init+0xd8>)
 800030a:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:113
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	799b      	ldrb	r3, [r3, #6]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d04d      	beq.n	80003b0 <EXTI_Init+0xb4>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:116
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000314:	4b2f      	ldr	r3, [pc, #188]	; (80003d4 <EXTI_Init+0xd8>)
 8000316:	4a2f      	ldr	r2, [pc, #188]	; (80003d4 <EXTI_Init+0xd8>)
 8000318:	6811      	ldr	r1, [r2, #0]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	43d2      	mvns	r2, r2
 8000320:	400a      	ands	r2, r1
 8000322:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:117
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000324:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <EXTI_Init+0xd8>)
 8000326:	4a2b      	ldr	r2, [pc, #172]	; (80003d4 <EXTI_Init+0xd8>)
 8000328:	6851      	ldr	r1, [r2, #4]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	43d2      	mvns	r2, r2
 8000330:	400a      	ands	r2, r1
 8000332:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:119
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	4413      	add	r3, r2
 800033c:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:121

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	6811      	ldr	r1, [r2, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	430a      	orrs	r2, r1
 800034a:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:124

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <EXTI_Init+0xd8>)
 800034e:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <EXTI_Init+0xd8>)
 8000350:	6891      	ldr	r1, [r2, #8]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	6812      	ldr	r2, [r2, #0]
 8000356:	43d2      	mvns	r2, r2
 8000358:	400a      	ands	r2, r1
 800035a:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:125
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <EXTI_Init+0xd8>)
 800035e:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <EXTI_Init+0xd8>)
 8000360:	68d1      	ldr	r1, [r2, #12]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	43d2      	mvns	r2, r2
 8000368:	400a      	ands	r2, r1
 800036a:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:128
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	2b10      	cmp	r3, #16
 8000372:	d10e      	bne.n	8000392 <EXTI_Init+0x96>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:131
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <EXTI_Init+0xd8>)
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <EXTI_Init+0xd8>)
 8000378:	6891      	ldr	r1, [r2, #8]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	6812      	ldr	r2, [r2, #0]
 800037e:	430a      	orrs	r2, r1
 8000380:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:132
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <EXTI_Init+0xd8>)
 8000384:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <EXTI_Init+0xd8>)
 8000386:	68d1      	ldr	r1, [r2, #12]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	430a      	orrs	r2, r1
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	e01b      	b.n	80003ca <EXTI_Init+0xce>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:136
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <EXTI_Init+0xd8>)
 8000394:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:137
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	795b      	ldrb	r3, [r3, #5]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	4413      	add	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:139

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	6811      	ldr	r1, [r2, #0]
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	6812      	ldr	r2, [r2, #0]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	e00c      	b.n	80003ca <EXTI_Init+0xce>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:144
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	791b      	ldrb	r3, [r3, #4]
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	4413      	add	r3, r2
 80003b8:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:147

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	6811      	ldr	r1, [r2, #0]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6812      	ldr	r2, [r2, #0]
 80003c4:	43d2      	mvns	r2, r2
 80003c6:	400a      	ands	r2, r1
 80003c8:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:149
  }
}
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40010400 	.word	0x40010400

080003d8 <EXTI_GetITStatus>:
EXTI_GetITStatus():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:225
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:226
  ITStatus bitstatus = RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	73fb      	strb	r3, [r7, #15]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:227
  uint32_t enablestatus = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:231
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <EXTI_GetITStatus+0x44>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4013      	ands	r3, r2
 80003f0:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:232
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <EXTI_GetITStatus+0x44>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4013      	ands	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d005      	beq.n	800040a <EXTI_GetITStatus+0x32>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:232 (discriminator 1)
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <EXTI_GetITStatus+0x32>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:234
  {
    bitstatus = SET;
 8000404:	2301      	movs	r3, #1
 8000406:	73fb      	strb	r3, [r7, #15]
 8000408:	e001      	b.n	800040e <EXTI_GetITStatus+0x36>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:238
  }
  else
  {
    bitstatus = RESET;
 800040a:	2300      	movs	r3, #0
 800040c:	73fb      	strb	r3, [r7, #15]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:240
  }
  return bitstatus;
 800040e:	7bfb      	ldrb	r3, [r7, #15]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:241
}
 8000410:	4618      	mov	r0, r3
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40010400 	.word	0x40010400

08000420 <EXTI_ClearITPendingBit>:
EXTI_ClearITPendingBit():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:250
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:254
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <EXTI_ClearITPendingBit+0x18>)
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	615a      	str	r2, [r3, #20]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_exti.c:255
}
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40010400 	.word	0x40010400

0800043c <GPIO_ResetBits>:
GPIO_ResetBits():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:375
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	807b      	strh	r3, [r7, #2]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:380
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000448:	887a      	ldrh	r2, [r7, #2]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	615a      	str	r2, [r3, #20]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:381
}
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <GPIO_EXTILineConfig>:
GPIO_EXTILineConfig():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:610
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000458:	b490      	push	{r4, r7}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4602      	mov	r2, r0
 8000460:	460b      	mov	r3, r1
 8000462:	71fa      	strb	r2, [r7, #7]
 8000464:	71bb      	strb	r3, [r7, #6]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:611
  uint32_t tmp = 0x00;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:616
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	f003 0303 	and.w	r3, r3, #3
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	220f      	movs	r2, #15
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:617
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <GPIO_EXTILineConfig+0x78>)
 800047c:	79ba      	ldrb	r2, [r7, #6]
 800047e:	0892      	lsrs	r2, r2, #2
 8000480:	b2d2      	uxtb	r2, r2
 8000482:	4913      	ldr	r1, [pc, #76]	; (80004d0 <GPIO_EXTILineConfig+0x78>)
 8000484:	79b8      	ldrb	r0, [r7, #6]
 8000486:	0880      	lsrs	r0, r0, #2
 8000488:	b2c0      	uxtb	r0, r0
 800048a:	3002      	adds	r0, #2
 800048c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000490:	68f9      	ldr	r1, [r7, #12]
 8000492:	43c9      	mvns	r1, r1
 8000494:	4001      	ands	r1, r0
 8000496:	3202      	adds	r2, #2
 8000498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:618
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <GPIO_EXTILineConfig+0x78>)
 800049e:	79ba      	ldrb	r2, [r7, #6]
 80004a0:	0892      	lsrs	r2, r2, #2
 80004a2:	b2d2      	uxtb	r2, r2
 80004a4:	490a      	ldr	r1, [pc, #40]	; (80004d0 <GPIO_EXTILineConfig+0x78>)
 80004a6:	79b8      	ldrb	r0, [r7, #6]
 80004a8:	0880      	lsrs	r0, r0, #2
 80004aa:	b2c0      	uxtb	r0, r0
 80004ac:	3002      	adds	r0, #2
 80004ae:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80004b2:	79fc      	ldrb	r4, [r7, #7]
 80004b4:	79b9      	ldrb	r1, [r7, #6]
 80004b6:	f001 0103 	and.w	r1, r1, #3
 80004ba:	0089      	lsls	r1, r1, #2
 80004bc:	fa04 f101 	lsl.w	r1, r4, r1
 80004c0:	4301      	orrs	r1, r0
 80004c2:	3202      	adds	r2, #2
 80004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:619
}
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc90      	pop	{r4, r7}
 80004ce:	4770      	bx	lr
 80004d0:	40010000 	.word	0x40010000

080004d4 <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1096
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1100
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d006      	beq.n	80004f4 <RCC_APB2PeriphClockCmd+0x20>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1102
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <RCC_APB2PeriphClockCmd+0x38>)
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <RCC_APB2PeriphClockCmd+0x38>)
 80004ea:	6991      	ldr	r1, [r2, #24]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	430a      	orrs	r2, r1
 80004f0:	619a      	str	r2, [r3, #24]
 80004f2:	e006      	b.n	8000502 <RCC_APB2PeriphClockCmd+0x2e>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1106
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <RCC_APB2PeriphClockCmd+0x38>)
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <RCC_APB2PeriphClockCmd+0x38>)
 80004f8:	6991      	ldr	r1, [r2, #24]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	400a      	ands	r2, r1
 8000500:	619a      	str	r2, [r3, #24]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1108
  }
}
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000

08000510 <__libc_init_array>:
__libc_init_array():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <__libc_init_array+0x5c>)
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <__libc_init_array+0x60>)
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	109b      	asrs	r3, r3, #2
 800051e:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	e007      	b.n	8000536 <__libc_init_array+0x26>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:185 (discriminator 2)
    __preinit_array_start[i]();
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <__libc_init_array+0x60>)
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800052e:	4798      	blx	r3
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:184 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:184 (discriminator 1)
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3f3      	bcc.n	8000526 <__libc_init_array+0x16>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <__libc_init_array+0x64>)
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <__libc_init_array+0x68>)
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	109b      	asrs	r3, r3, #2
 8000546:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	e007      	b.n	800055e <__libc_init_array+0x4e>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:194 (discriminator 2)
    __init_array_start[i]();
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <__libc_init_array+0x68>)
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000556:	4798      	blx	r3
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:193 (discriminator 2)
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:193 (discriminator 1)
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3f3      	bcc.n	800054e <__libc_init_array+0x3e>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	080001ec 	.word	0x080001ec
 8000570:	080001e8 	.word	0x080001e8
 8000574:	080001ec 	.word	0x080001ec
 8000578:	080001ec 	.word	0x080001ec

0800057c <__libc_fini_array>:
__libc_fini_array():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <__libc_fini_array+0x34>)
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <__libc_fini_array+0x38>)
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	109b      	asrs	r3, r3, #2
 800058a:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	e008      	b.n	80005a4 <__libc_fini_array+0x28>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:206 (discriminator 2)
    __fini_array_start[i - 1]();
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <__libc_fini_array+0x38>)
 8000598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800059c:	4798      	blx	r3
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:205 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:205 (discriminator 1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f3      	bne.n	8000592 <__libc_fini_array+0x16>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	080001ec 	.word	0x080001ec
 80005b4:	080001ec 	.word	0x080001ec

080005b8 <_exit>:
_exit():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_stm32f10x.c:15
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/startup_stm32f10x.c:18 (discriminator 1)
#if defined(DEBUG)
  while(1)
  ;
 80005c0:	e7fe      	b.n	80005c0 <_exit+0x8>
 80005c2:	bf00      	nop

080005c4 <SystemInit>:
SystemInit():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:213
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:216
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <SystemInit+0x5c>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <SystemInit+0x5c>)
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	f042 0201 	orr.w	r2, r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:220

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <SystemInit+0x5c>)
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <SystemInit+0x5c>)
 80005d8:	6859      	ldr	r1, [r3, #4]
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <SystemInit+0x60>)
 80005dc:	400b      	ands	r3, r1
 80005de:	6053      	str	r3, [r2, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:226
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <SystemInit+0x5c>)
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <SystemInit+0x5c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ee:	6013      	str	r3, [r2, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:229

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <SystemInit+0x5c>)
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <SystemInit+0x5c>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005fa:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:232

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SystemInit+0x5c>)
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <SystemInit+0x5c>)
 8000600:	6852      	ldr	r2, [r2, #4]
 8000602:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000606:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:251

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SystemInit+0x5c>)
 800060a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800060e:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:262
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000610:	f000 f80c 	bl	800062c <SetSysClock>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:267

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <SystemInit+0x64>)
 8000616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800061a:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:269
#endif 
}
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	f8ff0000 	.word	0xf8ff0000
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <SetSysClock>:
SetSysClock():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:420
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:432
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000630:	f000 f802 	bl	8000638 <SetSysClockTo72>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:437
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop

08000638 <SetSysClockTo72>:
SetSysClockTo72():
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:988
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:989
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:993
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <SetSysClockTo72+0xf8>)
 8000648:	4a39      	ldr	r2, [pc, #228]	; (8000730 <SetSysClockTo72+0xf8>)
 800064a:	6812      	ldr	r2, [r2, #0]
 800064c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000650:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:998 (discriminator 1)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <SetSysClockTo72+0xf8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:999 (discriminator 1)
    StartUpCounter++;  
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1000 (discriminator 1)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d103      	bne.n	8000670 <SetSysClockTo72+0x38>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800066e:	d1f0      	bne.n	8000652 <SetSysClockTo72+0x1a>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1002

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000670:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <SetSysClockTo72+0xf8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <SetSysClockTo72+0x4a>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1004
  {
    HSEStatus = (uint32_t)0x01;
 800067c:	2301      	movs	r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	e001      	b.n	8000686 <SetSysClockTo72+0x4e>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1008
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1011
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d14b      	bne.n	8000724 <SetSysClockTo72+0xec>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1014
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SetSysClockTo72+0xfc>)
 800068e:	4a29      	ldr	r2, [pc, #164]	; (8000734 <SetSysClockTo72+0xfc>)
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	f042 0210 	orr.w	r2, r2, #16
 8000696:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1017

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <SetSysClockTo72+0xfc>)
 800069a:	4a26      	ldr	r2, [pc, #152]	; (8000734 <SetSysClockTo72+0xfc>)
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	f022 0203 	bic.w	r2, r2, #3
 80006a2:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1018
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SetSysClockTo72+0xfc>)
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <SetSysClockTo72+0xfc>)
 80006a8:	6812      	ldr	r2, [r2, #0]
 80006aa:	f042 0202 	orr.w	r2, r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1022

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SetSysClockTo72+0xf8>)
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <SetSysClockTo72+0xf8>)
 80006b4:	6852      	ldr	r2, [r2, #4]
 80006b6:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1025
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <SetSysClockTo72+0xf8>)
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <SetSysClockTo72+0xf8>)
 80006bc:	6852      	ldr	r2, [r2, #4]
 80006be:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1028
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <SetSysClockTo72+0xf8>)
 80006c2:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <SetSysClockTo72+0xf8>)
 80006c4:	6852      	ldr	r2, [r2, #4]
 80006c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006ca:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1054
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <SetSysClockTo72+0xf8>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <SetSysClockTo72+0xf8>)
 80006d0:	6852      	ldr	r2, [r2, #4]
 80006d2:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80006d6:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1056
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <SetSysClockTo72+0xf8>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <SetSysClockTo72+0xf8>)
 80006dc:	6852      	ldr	r2, [r2, #4]
 80006de:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80006e2:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1060
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <SetSysClockTo72+0xf8>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <SetSysClockTo72+0xf8>)
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006ee:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1063

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006f0:	bf00      	nop
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1063 (discriminator 1)
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <SetSysClockTo72+0xf8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <SetSysClockTo72+0xba>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1068
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <SetSysClockTo72+0xf8>)
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <SetSysClockTo72+0xf8>)
 8000702:	6852      	ldr	r2, [r2, #4]
 8000704:	f022 0203 	bic.w	r2, r2, #3
 8000708:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1069
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <SetSysClockTo72+0xf8>)
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <SetSysClockTo72+0xf8>)
 800070e:	6852      	ldr	r2, [r2, #4]
 8000710:	f042 0202 	orr.w	r2, r2, #2
 8000714:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1072

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000716:	bf00      	nop
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1072 (discriminator 1)
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SetSysClockTo72+0xf8>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f003 030c 	and.w	r3, r3, #12
 8000720:	2b08      	cmp	r3, #8
 8000722:	d1f9      	bne.n	8000718 <SetSysClockTo72+0xe0>
/home/kartik/workspaceSTM32/enc_final/Debug/../libs/CMSIS/src/system_stm32f10x.c:1080
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	40022000 	.word	0x40022000
