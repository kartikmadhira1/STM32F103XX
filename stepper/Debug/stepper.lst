
stepper.elf:     file format elf32-littlearm
stepper.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800010d

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00001710 memsz 0x00001710 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08001710 align 2**15
         filesz 0x00000014 memsz 0x00000170 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   000001e8  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  080001e8  080001e8  000081e8  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00001520  080001f0  080001f0  000081f0  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000014  20000000  08001710  00010000  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000005c  20000014  08001724  00010014  2**2  ALLOC
  5 ._check_stack 00000100  20000070  08001780  00010014  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  00010014  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000033  00000000  00000000  00010084  2**0  CONTENTS, READONLY
  8 .debug_aranges 00000470  00000000  00000000  000100b7  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002b0b  00000000  00000000  00010527  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bca  00000000  00000000  00013032  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a7d  00000000  00000000  00013bfc  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d14  00000000  00000000  0001667c  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000506ec  00000000  00000000  00017390  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000003e0  00000000  00000000  00067a7c  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000e0d5  00000000  00000000  00067e5c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001e8 l    d  ._inits	00000000 ._inits
080001f0 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000014 l    d  .bss	00000000 .bss
20000070 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f10x.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
20000014 l     O .bss	00000002 a
2000001c l     O .bss	00000004 uwTimingDelay
08000518 l     F .text	00000024 TimingDelay_Decrement
00000000 l    df *ABS*	00000000 stm32f10x_dma.c
00000000 l    df *ABS*	00000000 stm32f10x_gpio.c
00000000 l    df *ABS*	00000000 stm32f10x_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
20000010 l     O .data	00000004 ADCPrescTable
00000000 l    df *ABS*	00000000 stm32f10x_usart.c
00000000 l    df *ABS*	00000000 startup_stm32f10x.c
00000000 l    df *ABS*	00000000 system_stm32f10x.c
08000e20 l     F .text	0000000a SetSysClock
08000e2c l     F .text	00000100 SetSysClockTo72
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 
20004c00 l       *ABS*	00000000 _Heap_Limit
00000400 l       *ABS*	00000000 _Main_Stack_Size
08001710 l       .text	00000000 __exidx_end
20000070 l       ._check_stack	00000000 _Heap_Begin
08001710 l       .data	00000000 _etext
20004c00 l       *ABS*	00000000 __Main_Stack_Limit
080001ec l       ._inits	00000000 __fini_array_end
08001710 l       .text	00000000 __exidx_start
00000400 l       *ABS*	00000000 __Main_Stack_Size
00000100 l       *ABS*	00000000 _Minimum_Stack_Size
20000070 l       ._check_stack	00000000 _end_noinit
080001ec l       ._inits	00000000 __fini_array_start
080001ec l       ._inits	00000000 __init_array_end
080001ec l       ._inits	00000000 __preinit_array_end
20005000 l       *ABS*	00000000 __stack
080001ec l       ._inits	00000000 __init_array_start
080001e8 l       ._inits	00000000 __preinit_array_start
08000198  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI2_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_TRG_COM_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
080001d0  w    F .isr_vector	00000006 DebugMon_Handler
080005c4 g     F .text	00000038 DMA_Cmd
080001e8 g     O ._inits	00000004 p_system_init
20000000 g       .data	00000000 __data_start__
08001240 g     F .text	0000005a .hidden __floatdidf
20000020 g     O .bss	0000002c dma
08000198  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
080001a8  w    F .isr_vector	00000006 HardFault_Handler
08000198  w    F .isr_vector	00000006 TIM6_IRQHandler
0800053c g     F .text	0000000a SysTick_Handler
08000198  w    F .isr_vector	00000006 PVD_IRQHandler
08000198  w    F .isr_vector	00000006 SDIO_IRQHandler
08001710 g       .data	00000000 _sidata
080001d8  w    F .isr_vector	00000006 PendSV_Handler
080001a0  w    F .isr_vector	00000006 NMI_Handler
08000150 g     F .isr_vector	00000048 system_init
08000198  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI3_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
20000014 g       .bss	00000000 _sbss
08000548 g     F .text	0000007c DMA_Init
08000198  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
080011d0 g     F .text	00000022 .hidden __floatsidf
08000198  w    F .isr_vector	00000006 EXTI0_IRQHandler
08000198  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
20000070 g       ._check_stack	00000000 _noinit
08000198  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_UP_TIM16_IRQHandler
080001c0  w    F .isr_vector	00000006 UsageFault_Handler
0800099c g     F .text	0000003c RCC_APB2PeriphClockCmd
08000198  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
08000198  w    F .isr_vector	00000006 ADC1_2_IRQHandler
08000684 g     F .text	00000176 GPIO_Init
20000014 g       .bss	00000000 __bss_start__
080011b0 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
08000198  w    F .isr_vector	00000006 SPI1_IRQHandler
08000c7c g     F .text	0000003e USART_Cmd
08000f2c g     F .text	00000000 .hidden __aeabi_drsub
08000198  w    F .isr_vector	00000006 TAMPER_IRQHandler
08000198  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
2000004c g     O .bss	00000003 k
08000198  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
08000198  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
080011f4 g     F .text	0000003a .hidden __extendsfdf2
08000198  w    F .isr_vector	00000006 TIM8_UP_IRQHandler
080014f0 g     F .text	000001d0 .hidden __aeabi_ddiv
08000f38 g     F .text	00000276 .hidden __adddf3
0800129c g     F .text	00000254 .hidden __aeabi_dmul
08000d04 g     F .text	0000006c __libc_init_array
08000198  w    F .isr_vector	00000006 DMA2_Channel2_IRQHandler
08000960 g     F .text	0000003c RCC_AHBPeriphClockCmd
08000198  w    F .isr_vector	00000006 DMA1_Channel4_IRQHandler
080011b0 g     F .text	0000001e .hidden __floatunsidf
20000050 g     O .bss	00000004 steps
080005fc g     F .text	00000054 DMA_GetFlagStatus
08000198  w    F .isr_vector	00000006 USART3_IRQHandler
08000d70 g     F .text	0000003c __libc_fini_array
08000198  w    F .isr_vector	00000006 RTC_IRQHandler
20000070 g       .bss	00000000 _ebss
08000198  w    F .isr_vector	00000006 DMA1_Channel7_IRQHandler
0800010c  w    F .isr_vector	00000044 Reset_Handler
08000198  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
080016c0 g     F .text	0000004e .hidden __fixdfsi
08000198  w    F .isr_vector	00000006 UART5_IRQHandler
08000198  w    F .isr_vector	00000006 ADC3_IRQHandler
20000054 g     O .bss	00000010 usart
08000198  w    F .isr_vector	00000006 TIM4_IRQHandler
08000f38 g     F .text	00000276 .hidden __aeabi_dadd
08000198  w    F .isr_vector	00000006 DMA2_Channel1_IRQHandler
08001230 g     F .text	0000006a .hidden __aeabi_ul2d
08000198  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
20000014 g       .data	00000000 __data_end__
20000064 g     O .bss	00000004 i
080007fc g     F .text	00000164 RCC_GetClocksFreq
08000198  w    F .isr_vector	00000006 DMA1_Channel6_IRQHandler
08000198  w    F .isr_vector	00000006 UART4_IRQHandler
08000198  w    F .isr_vector	00000006 DMA2_Channel4_IRQHandler
08000b08 g     F .text	00000174 USART_Init
20000070 g       .bss	00000000 __bss_end__
08000198  w    F .isr_vector	00000006 TIM3_IRQHandler
08000198  w    F .isr_vector	00000006 RCC_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_TRG_COM_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel1_IRQHandler
08000f34 g     F .text	0000027a .hidden __aeabi_dsub
08000198  w    F .isr_vector	00000006 Default_Handler
08001230 g     F .text	0000006a .hidden __floatundidf
080004c8 g     F .text	00000050 set_bits
08000198  w    F .isr_vector	00000006 CEC_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
20000018 g     O .bss	00000004 buffer
08000198  w    F .isr_vector	00000006 TIM14_IRQHandler
08000198  w    F .isr_vector	00000006 TIM13_IRQHandler
08000198  w    F .isr_vector	00000006 TIM12_IRQHandler
08000198  w    F .isr_vector	00000006 TIM7_IRQHandler
08000198  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
080011d0 g     F .text	00000022 .hidden __aeabi_i2d
08000198  w    F .isr_vector	00000006 TIM5_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
080014f0 g     F .text	000001d0 .hidden __divdf3
0800129c g     F .text	00000254 .hidden __muldf3
08000198  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
08000a50 g     F .text	000000b8 USART_DeInit
08000198  w    F .isr_vector	00000006 SPI2_IRQHandler
080001b0  w    F .isr_vector	00000006 MemManage_Handler
080001f0 g     F .text	00000214 main
08000198  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
080001c8  w    F .isr_vector	00000006 SVC_Handler
08000198  w    F .isr_vector	00000006 DMA2_Channel5_IRQHandler
08001240 g     F .text	0000005a .hidden __aeabi_l2d
08000198  w    F .isr_vector	00000006 DMA1_Channel5_IRQHandler
08000198  w    F .isr_vector	00000006 EXTI4_IRQHandler
08000198  w    F .isr_vector	00000006 USB_LP_CAN1_RX0_IRQHandler
08000db8 g     F .text	00000068 SystemInit
20000068 g     O .bss	00000004 count
08000198  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM17_IRQHandler
08000198  w    F .isr_vector	00000006 USB_HP_CAN1_TX_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel3_IRQHandler
08000198  w    F .isr_vector	00000006 FSMC_IRQHandler
08000198  w    F .isr_vector	00000006 ETH_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_UP_IRQHandler
08000198  w    F .isr_vector	00000006 WWDG_IRQHandler
08000a14 g     F .text	0000003c RCC_APB1PeriphResetCmd
08000198  w    F .isr_vector	00000006 TIM2_IRQHandler
08000198  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_BRK_IRQHandler
20005000 g       *ABS*	00000000 _estack
08000198  w    F .isr_vector	00000006 EXTI1_IRQHandler
2000006c g     O .bss	00000004 gpio
20000014 g       .data	00000000 _edata
08000408 g     F .text	000000c0 rec_data
08000198  w    F .isr_vector	00000006 DMA2_Channel4_5_IRQHandler
08000198  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	0000010c g_pfnVectors
080016c0 g     F .text	0000004e .hidden __aeabi_d2iz
08000198  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
08000198  w    F .isr_vector	00000006 DMA1_Channel2_IRQHandler
08000198  w    F .isr_vector	00000006 TIM8_BRK_IRQHandler
08000650 g     F .text	00000034 DMA_ClearFlag
08000198  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
08000198  w    F .isr_vector	00000006 FLASH_IRQHandler
08000dac  w    F .text	0000000a _exit
080001b8  w    F .isr_vector	00000006 BusFault_Handler
08000198  w    F .isr_vector	00000006 USART1_IRQHandler
08000198  w    F .isr_vector	00000006 OTG_FS_IRQHandler
08000198  w    F .isr_vector	00000006 SPI3_IRQHandler
080009d8 g     F .text	0000003c RCC_APB2PeriphResetCmd
08000198  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
080011f4 g     F .text	0000003a .hidden __aeabi_f2d
08000f34 g     F .text	0000027a .hidden __subdf3
08000cbc g     F .text	00000046 USART_DMACmd
08000198  w    F .isr_vector	00000006 USBWakeUp_IRQHandler
08000198  w    F .isr_vector	00000006 DMA2_Channel3_IRQHandler
08000198  w    F .isr_vector	00000006 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
$d():
 8000000:	00 50 00 20 0d 01 00 08 a1 01 00 08 a9 01 00 08     .P. ............
 8000010:	b1 01 00 08 b9 01 00 08 c1 01 00 08 00 00 00 00     ................
	...
 800002c:	c9 01 00 08 d1 01 00 08 00 00 00 00 d9 01 00 08     ................
 800003c:	3d 05 00 08 99 01 00 08 99 01 00 08 99 01 00 08     =...............
 800004c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800005c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800006c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800007c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800008c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 800009c:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000ac:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000bc:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000cc:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
 80000dc:	99 01 00 08 99 01 00 08 99 01 00 08 99 01 00 08     ................
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <Reset_Handler>:
Reset_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 800010c:	b580      	push	{r7, lr}
 800010e:	b084      	sub	sp, #16
 8000110:	af00      	add	r7, sp, #0
 8000112:	4b0d      	ldr	r3, [pc, #52]	; (8000148 <Reset_Handler+0x3c>)
 8000114:	60bb      	str	r3, [r7, #8]
 8000116:	4b0d      	ldr	r3, [pc, #52]	; (800014c <Reset_Handler+0x40>)
 8000118:	607b      	str	r3, [r7, #4]
bss_init():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 800011a:	68bb      	ldr	r3, [r7, #8]
 800011c:	603b      	str	r3, [r7, #0]
 800011e:	e004      	b.n	800012a <Reset_Handler+0x1e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 8000120:	683b      	ldr	r3, [r7, #0]
 8000122:	1d1a      	adds	r2, r3, #4
 8000124:	603a      	str	r2, [r7, #0]
 8000126:	2200      	movs	r2, #0
 8000128:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 800012a:	687a      	ldr	r2, [r7, #4]
 800012c:	683b      	ldr	r3, [r7, #0]
 800012e:	429a      	cmp	r2, r3
 8000130:	d8f6      	bhi.n	8000120 <Reset_Handler+0x14>
Reset_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 8000132:	f000 fde7 	bl	8000d04 <__libc_init_array>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 8000136:	f000 f85b 	bl	80001f0 <main>
 800013a:	60f8      	str	r0, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 800013c:	f000 fe18 	bl	8000d70 <__libc_fini_array>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 8000140:	68f8      	ldr	r0, [r7, #12]
 8000142:	f000 fe33 	bl	8000dac <_exit>
 8000146:	bf00      	nop
 8000148:	20000014 	.word	0x20000014
 800014c:	20000070 	.word	0x20000070

08000150 <system_init>:
system_init():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	4b0d      	ldr	r3, [pc, #52]	; (800018c <system_init+0x3c>)
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	4b0d      	ldr	r3, [pc, #52]	; (8000190 <system_init+0x40>)
 800015c:	60bb      	str	r3, [r7, #8]
 800015e:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <system_init+0x44>)
 8000160:	607b      	str	r3, [r7, #4]
data_init():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	603b      	str	r3, [r7, #0]
 8000166:	e007      	b.n	8000178 <system_init+0x28>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 8000168:	683b      	ldr	r3, [r7, #0]
 800016a:	1d1a      	adds	r2, r3, #4
 800016c:	603a      	str	r2, [r7, #0]
 800016e:	68fa      	ldr	r2, [r7, #12]
 8000170:	1d11      	adds	r1, r2, #4
 8000172:	60f9      	str	r1, [r7, #12]
 8000174:	6812      	ldr	r2, [r2, #0]
 8000176:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	429a      	cmp	r2, r3
 800017e:	d8f3      	bhi.n	8000168 <system_init+0x18>
system_init():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 8000180:	f000 fe1a 	bl	8000db8 <SystemInit>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:257
}
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	08001710 	.word	0x08001710
 8000190:	20000000 	.word	0x20000000
 8000194:	20000014 	.word	0x20000014

08000198 <ADC1_2_IRQHandler>:
Default_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:934
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:937 (discriminator 1)
  while (1)
    {
    }
 800019c:	e7fe      	b.n	800019c <ADC1_2_IRQHandler+0x4>
RTC_Alarm_IRQHandler():
 800019e:	bf00      	nop

080001a0 <NMI_Handler>:
NMI_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:946
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:949 (discriminator 1)
  while (1)
    {
    }
 80001a4:	e7fe      	b.n	80001a4 <NMI_Handler+0x4>
 80001a6:	bf00      	nop

080001a8 <HardFault_Handler>:
HardFault_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:954
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:957 (discriminator 1)
  while (1)
    {
    }
 80001ac:	e7fe      	b.n	80001ac <HardFault_Handler+0x4>
 80001ae:	bf00      	nop

080001b0 <MemManage_Handler>:
MemManage_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:962
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:965 (discriminator 1)
  while (1)
    {
    }
 80001b4:	e7fe      	b.n	80001b4 <MemManage_Handler+0x4>
 80001b6:	bf00      	nop

080001b8 <BusFault_Handler>:
BusFault_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:970
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:973 (discriminator 1)
  while (1)
    {
    }
 80001bc:	e7fe      	b.n	80001bc <BusFault_Handler+0x4>
 80001be:	bf00      	nop

080001c0 <UsageFault_Handler>:
UsageFault_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:978
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:981 (discriminator 1)
  while (1)
    {
    }
 80001c4:	e7fe      	b.n	80001c4 <UsageFault_Handler+0x4>
 80001c6:	bf00      	nop

080001c8 <SVC_Handler>:
SVC_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:986
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:989 (discriminator 1)
  while (1)
    {
    }
 80001cc:	e7fe      	b.n	80001cc <SVC_Handler+0x4>
 80001ce:	bf00      	nop

080001d0 <DebugMon_Handler>:
DebugMon_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:994
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:997 (discriminator 1)
  while (1)
    {
    }
 80001d4:	e7fe      	b.n	80001d4 <DebugMon_Handler+0x4>
 80001d6:	bf00      	nop

080001d8 <PendSV_Handler>:
PendSV_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1002
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1005 (discriminator 1)
  while (1)
    {
    }
 80001dc:	e7fe      	b.n	80001dc <PendSV_Handler+0x4>
 80001de:	bf00      	nop
SysTick_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1010
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/vectors_stm32f10x.c:1013 (discriminator 1)
  while (1)
    {
    }
 80001e4:	e7fe      	b.n	80001e4 <PendSV_Handler+0xc>
PendSV_Handler():
 80001e6:	bf00      	nop

Disassembly of section .text:

080001f0 <main>:
main():
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:44
char k[3];
static uint16_t a;
uint32_t  buffer = 0x0000;
// ----------------------------------------------------------------------------
int main ()
{ /*
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:51
	gpio.GPIO_Pin=(1<<MS1 | 1<<MS2 | 1<<MS3 | 1<<DIR);
	gpio.GPIO_Mode=GPIO_Mode_Out_PP;
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
	//sTince gpio is a struct, it is passed by reference.
	GPIO_Init(GPIOA, &gpio); */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 80001f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80001f8:	2101      	movs	r1, #1
 80001fa:	f000 fbcf 	bl	800099c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:52
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 80001fe:	2004      	movs	r0, #4
 8000200:	2101      	movs	r1, #1
 8000202:	f000 fbcb 	bl	800099c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:53
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
 8000206:	2001      	movs	r0, #1
 8000208:	2101      	movs	r1, #1
 800020a:	f000 fbc7 	bl	800099c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:55
	//setting USART Tx and Rx pins
	gpio.GPIO_Pin=(USART_TX);
 800020e:	4b74      	ldr	r3, [pc, #464]	; (80003e0 <main+0x1f0>)
 8000210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000214:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:56
	gpio.GPIO_Mode=GPIO_Mode_AF_PP;
 8000216:	4b72      	ldr	r3, [pc, #456]	; (80003e0 <main+0x1f0>)
 8000218:	2218      	movs	r2, #24
 800021a:	70da      	strb	r2, [r3, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:57
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
 800021c:	4b70      	ldr	r3, [pc, #448]	; (80003e0 <main+0x1f0>)
 800021e:	2201      	movs	r2, #1
 8000220:	709a      	strb	r2, [r3, #2]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:58
	GPIO_Init(GPIOA, &gpio);
 8000222:	4870      	ldr	r0, [pc, #448]	; (80003e4 <main+0x1f4>)
 8000224:	496e      	ldr	r1, [pc, #440]	; (80003e0 <main+0x1f0>)
 8000226:	f000 fa2d 	bl	8000684 <GPIO_Init>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:60

	gpio.GPIO_Pin=USART_RX;
 800022a:	4b6d      	ldr	r3, [pc, #436]	; (80003e0 <main+0x1f0>)
 800022c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000230:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:61
	gpio.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 8000232:	4b6b      	ldr	r3, [pc, #428]	; (80003e0 <main+0x1f0>)
 8000234:	2204      	movs	r2, #4
 8000236:	70da      	strb	r2, [r3, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:62
	GPIO_Init(GPIOA, &gpio);
 8000238:	486a      	ldr	r0, [pc, #424]	; (80003e4 <main+0x1f4>)
 800023a:	4969      	ldr	r1, [pc, #420]	; (80003e0 <main+0x1f0>)
 800023c:	f000 fa22 	bl	8000684 <GPIO_Init>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:67
	//now the question is that do i intialize the USART individually or should I
	//do that via a DMA- the answer is that USART is my peripeheral and DMA is the mode
	//through which i want to access my data blocks
	//instead of getting an integer value from DMA array
	usart.USART_Mode=USART_Mode_Rx | USART_Mode_Tx ;
 8000240:	4b69      	ldr	r3, [pc, #420]	; (80003e8 <main+0x1f8>)
 8000242:	220c      	movs	r2, #12
 8000244:	815a      	strh	r2, [r3, #10]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:68
	usart.USART_BaudRate=9600;
 8000246:	4b68      	ldr	r3, [pc, #416]	; (80003e8 <main+0x1f8>)
 8000248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800024c:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:69
	usart.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 800024e:	4b66      	ldr	r3, [pc, #408]	; (80003e8 <main+0x1f8>)
 8000250:	2200      	movs	r2, #0
 8000252:	819a      	strh	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:70
	usart.USART_StopBits=USART_StopBits_1;
 8000254:	4b64      	ldr	r3, [pc, #400]	; (80003e8 <main+0x1f8>)
 8000256:	2200      	movs	r2, #0
 8000258:	80da      	strh	r2, [r3, #6]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:71
	usart.USART_Parity=USART_Parity_No;
 800025a:	4b63      	ldr	r3, [pc, #396]	; (80003e8 <main+0x1f8>)
 800025c:	2200      	movs	r2, #0
 800025e:	811a      	strh	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:72
	usart.USART_WordLength=USART_WordLength_8b;
 8000260:	4b61      	ldr	r3, [pc, #388]	; (80003e8 <main+0x1f8>)
 8000262:	2200      	movs	r2, #0
 8000264:	809a      	strh	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:73
	USART_Init(USART1, &usart);
 8000266:	4861      	ldr	r0, [pc, #388]	; (80003ec <main+0x1fc>)
 8000268:	495f      	ldr	r1, [pc, #380]	; (80003e8 <main+0x1f8>)
 800026a:	f000 fc4d 	bl	8000b08 <USART_Init>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:74
	USART_Cmd(USART1,ENABLE);
 800026e:	485f      	ldr	r0, [pc, #380]	; (80003ec <main+0x1fc>)
 8000270:	2101      	movs	r1, #1
 8000272:	f000 fd03 	bl	8000c7c <USART_Cmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:86
	//sending values using the pySerial library on python.
	/*
	 * The three inputs are mainly the distance to be travelled by the stepper's pulley,
	 * the step size of the stepper and direction
	 */
	for(i=0;i<3;i++){
 8000276:	4b5e      	ldr	r3, [pc, #376]	; (80003f0 <main+0x200>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	e015      	b.n	80002aa <main+0xba>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:87 (discriminator 2)
		USART_Init(USART1, &usart);
 800027e:	485b      	ldr	r0, [pc, #364]	; (80003ec <main+0x1fc>)
 8000280:	4959      	ldr	r1, [pc, #356]	; (80003e8 <main+0x1f8>)
 8000282:	f000 fc41 	bl	8000b08 <USART_Init>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:88 (discriminator 2)
		USART_Cmd(USART1,ENABLE);
 8000286:	4859      	ldr	r0, [pc, #356]	; (80003ec <main+0x1fc>)
 8000288:	2101      	movs	r1, #1
 800028a:	f000 fcf7 	bl	8000c7c <USART_Cmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:89 (discriminator 2)
		rec_data();
 800028e:	f000 f8bb 	bl	8000408 <rec_data>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:90 (discriminator 2)
		k[i]=buffer;
 8000292:	4b57      	ldr	r3, [pc, #348]	; (80003f0 <main+0x200>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a57      	ldr	r2, [pc, #348]	; (80003f4 <main+0x204>)
 8000298:	6812      	ldr	r2, [r2, #0]
 800029a:	b2d1      	uxtb	r1, r2
 800029c:	4a56      	ldr	r2, [pc, #344]	; (80003f8 <main+0x208>)
 800029e:	54d1      	strb	r1, [r2, r3]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:86 (discriminator 2)
	//sending values using the pySerial library on python.
	/*
	 * The three inputs are mainly the distance to be travelled by the stepper's pulley,
	 * the step size of the stepper and direction
	 */
	for(i=0;i<3;i++){
 80002a0:	4b53      	ldr	r3, [pc, #332]	; (80003f0 <main+0x200>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	4b52      	ldr	r3, [pc, #328]	; (80003f0 <main+0x200>)
 80002a8:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:86 (discriminator 1)
 80002aa:	4b51      	ldr	r3, [pc, #324]	; (80003f0 <main+0x200>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	dde5      	ble.n	800027e <main+0x8e>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:93
		USART_Cmd(USART1,ENABLE);
		rec_data();
		k[i]=buffer;
	}
	//putting a switch case to get the values
	switch(k[2]){
 80002b2:	4b51      	ldr	r3, [pc, #324]	; (80003f8 <main+0x208>)
 80002b4:	789b      	ldrb	r3, [r3, #2]
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	3b31      	subs	r3, #49	; 0x31
 80002ba:	2b07      	cmp	r3, #7
 80002bc:	f200 8087 	bhi.w	80003ce <main+0x1de>
 80002c0:	a201      	add	r2, pc, #4	; (adr r2, 80002c8 <main+0xd8>)
 80002c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c6:	bf00      	nop
 80002c8:	080002e9 	.word	0x080002e9
 80002cc:	08000321 	.word	0x08000321
 80002d0:	080003cf 	.word	0x080003cf
 80002d4:	0800035b 	.word	0x0800035b
 80002d8:	080003cf 	.word	0x080003cf
 80002dc:	080003cf 	.word	0x080003cf
 80002e0:	080003cf 	.word	0x080003cf
 80002e4:	08000395 	.word	0x08000395
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:95
	case '1':
		a=0x00;//this will be the for ms1, ms2, ms3=0;
 80002e8:	4b44      	ldr	r3, [pc, #272]	; (80003fc <main+0x20c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:97
		//now given the distance, what will be the number of steps to travel
		steps=k[1]/CIRCUM;
 80002ee:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <main+0x208>)
 80002f0:	785b      	ldrb	r3, [r3, #1]
 80002f2:	b25b      	sxtb	r3, r3
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 ff6b 	bl	80011d0 <__aeabi_i2d>
 80002fa:	4602      	mov	r2, r0
 80002fc:	460b      	mov	r3, r1
 80002fe:	4610      	mov	r0, r2
 8000300:	4619      	mov	r1, r3
 8000302:	a335      	add	r3, pc, #212	; (adr r3, 80003d8 <main+0x1e8>)
 8000304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000308:	f001 f8f2 	bl	80014f0 <__aeabi_ddiv>
 800030c:	4602      	mov	r2, r0
 800030e:	460b      	mov	r3, r1
 8000310:	4610      	mov	r0, r2
 8000312:	4619      	mov	r1, r3
 8000314:	f001 f9d4 	bl	80016c0 <__aeabi_d2iz>
 8000318:	4602      	mov	r2, r0
 800031a:	4b39      	ldr	r3, [pc, #228]	; (8000400 <main+0x210>)
 800031c:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:98
		break;
 800031e:	e056      	b.n	80003ce <main+0x1de>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:100
	case '2':
		a=0x08;
 8000320:	4b36      	ldr	r3, [pc, #216]	; (80003fc <main+0x20c>)
 8000322:	2208      	movs	r2, #8
 8000324:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:101
		steps=k[1]*2/CIRCUM;
 8000326:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <main+0x208>)
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	b25b      	sxtb	r3, r3
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4618      	mov	r0, r3
 8000330:	f000 ff4e 	bl	80011d0 <__aeabi_i2d>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	a326      	add	r3, pc, #152	; (adr r3, 80003d8 <main+0x1e8>)
 800033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000342:	f001 f8d5 	bl	80014f0 <__aeabi_ddiv>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	4610      	mov	r0, r2
 800034c:	4619      	mov	r1, r3
 800034e:	f001 f9b7 	bl	80016c0 <__aeabi_d2iz>
 8000352:	4602      	mov	r2, r0
 8000354:	4b2a      	ldr	r3, [pc, #168]	; (8000400 <main+0x210>)
 8000356:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:102
		break;
 8000358:	e039      	b.n	80003ce <main+0x1de>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:104
	case '4':
		a=0x10;
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <main+0x20c>)
 800035c:	2210      	movs	r2, #16
 800035e:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:105
		steps=k[1]*4/CIRCUM;
 8000360:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <main+0x208>)
 8000362:	785b      	ldrb	r3, [r3, #1]
 8000364:	b25b      	sxtb	r3, r3
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4618      	mov	r0, r3
 800036a:	f000 ff31 	bl	80011d0 <__aeabi_i2d>
 800036e:	4602      	mov	r2, r0
 8000370:	460b      	mov	r3, r1
 8000372:	4610      	mov	r0, r2
 8000374:	4619      	mov	r1, r3
 8000376:	a318      	add	r3, pc, #96	; (adr r3, 80003d8 <main+0x1e8>)
 8000378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800037c:	f001 f8b8 	bl	80014f0 <__aeabi_ddiv>
 8000380:	4602      	mov	r2, r0
 8000382:	460b      	mov	r3, r1
 8000384:	4610      	mov	r0, r2
 8000386:	4619      	mov	r1, r3
 8000388:	f001 f99a 	bl	80016c0 <__aeabi_d2iz>
 800038c:	4602      	mov	r2, r0
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <main+0x210>)
 8000390:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:106
		break;
 8000392:	e01c      	b.n	80003ce <main+0x1de>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:108
	case '8':
		a=0x18;
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <main+0x20c>)
 8000396:	2218      	movs	r2, #24
 8000398:	801a      	strh	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:109
		steps=k[1]*8/CIRCUM;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <main+0x208>)
 800039c:	785b      	ldrb	r3, [r3, #1]
 800039e:	b25b      	sxtb	r3, r3
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 ff14 	bl	80011d0 <__aeabi_i2d>
 80003a8:	4602      	mov	r2, r0
 80003aa:	460b      	mov	r3, r1
 80003ac:	4610      	mov	r0, r2
 80003ae:	4619      	mov	r1, r3
 80003b0:	a309      	add	r3, pc, #36	; (adr r3, 80003d8 <main+0x1e8>)
 80003b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b6:	f001 f89b 	bl	80014f0 <__aeabi_ddiv>
 80003ba:	4602      	mov	r2, r0
 80003bc:	460b      	mov	r3, r1
 80003be:	4610      	mov	r0, r2
 80003c0:	4619      	mov	r1, r3
 80003c2:	f001 f97d 	bl	80016c0 <__aeabi_d2iz>
 80003c6:	4602      	mov	r2, r0
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <main+0x210>)
 80003ca:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:110
		break;
 80003cc:	bf00      	nop
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:117
		a=0x38;
		steps=k[1]*16/CIRCUM;
		break;
	}
//since a pulse has to be given for every step,
	set_bits();
 80003ce:	f000 f87b 	bl	80004c8 <set_bits>
 80003d2:	2300      	movs	r3, #0
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:134
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
	}
	*/


}
 80003d4:	4618      	mov	r0, r3
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	51eb851f 	.word	0x51eb851f
 80003dc:	40191eb8 	.word	0x40191eb8
 80003e0:	2000006c 	.word	0x2000006c
 80003e4:	40010800 	.word	0x40010800
 80003e8:	20000054 	.word	0x20000054
 80003ec:	40013800 	.word	0x40013800
 80003f0:	20000064 	.word	0x20000064
 80003f4:	20000018 	.word	0x20000018
 80003f8:	2000004c 	.word	0x2000004c
 80003fc:	20000014 	.word	0x20000014
 8000400:	20000050 	.word	0x20000050
$t():
 8000404:	f3af 8000 	nop.w

08000408 <rec_data>:
rec_data():
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:138

//subroutine to get the recieved data

int rec_data(){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:139
	USART_DMACmd(USART1,USART_DMAReq_Rx,ENABLE);
 800040c:	4829      	ldr	r0, [pc, #164]	; (80004b4 <rec_data+0xac>)
 800040e:	2140      	movs	r1, #64	; 0x40
 8000410:	2201      	movs	r2, #1
 8000412:	f000 fc53 	bl	8000cbc <USART_DMACmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:140
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 8000416:	2001      	movs	r0, #1
 8000418:	2101      	movs	r1, #1
 800041a:	f000 faa1 	bl	8000960 <RCC_AHBPeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:141
	dma.DMA_PeripheralBaseAddr=(&(USART1->DR));
 800041e:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <rec_data+0xb0>)
 8000420:	4a26      	ldr	r2, [pc, #152]	; (80004bc <rec_data+0xb4>)
 8000422:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:142
	dma.DMA_PeripheralInc=DMA_PeripheralInc_Disable;
 8000424:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <rec_data+0xb0>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:144
	//essentially, the USART uses 8 bit serial transfer
	dma.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte;
 800042a:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <rec_data+0xb0>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:145
	dma.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;
 8000430:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <rec_data+0xb0>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:147
	//we are doing periph->DMA data block transfer, so disabling M2M
	dma.DMA_M2M=DMA_M2M_Disable;
 8000436:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <rec_data+0xb0>)
 8000438:	2200      	movs	r2, #0
 800043a:	629a      	str	r2, [r3, #40]	; 0x28
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:149
	//enabling circular buffer, as it it meant for continuous data flow
	dma.DMA_Mode=DMA_Mode_Normal;
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <rec_data+0xb0>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:151
	//I dont know what this means lol, can be the iterations for the buffer
	dma.DMA_BufferSize=1;
 8000442:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <rec_data+0xb0>)
 8000444:	2201      	movs	r2, #1
 8000446:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:152
	dma.DMA_Priority=DMA_Priority_VeryHigh;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <rec_data+0xb0>)
 800044a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800044e:	625a      	str	r2, [r3, #36]	; 0x24
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:155
	//recieving the data in memory location pointing to the buffer.
	//buffer=recieved data
	dma.DMA_MemoryBaseAddr=&buffer;
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <rec_data+0xb8>)
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <rec_data+0xb0>)
 8000454:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:156
	dma.DMA_MemoryInc=DMA_MemoryInc_Enable;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <rec_data+0xb0>)
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	615a      	str	r2, [r3, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:158
	//the peripheral is the source of the data block transfer
	dma.DMA_DIR=DMA_DIR_PeripheralSRC;
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <rec_data+0xb0>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:159
	DMA_Init(DMA1_Channel5, &dma);
 8000462:	4818      	ldr	r0, [pc, #96]	; (80004c4 <rec_data+0xbc>)
 8000464:	4914      	ldr	r1, [pc, #80]	; (80004b8 <rec_data+0xb0>)
 8000466:	f000 f86f 	bl	8000548 <DMA_Init>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:163
	/*now that all the properties are assigned and the DMA1 channel5 assigned,
	we now start the DMA transfer and wait for the DMA flag to reset.
	*/
	DMA_Cmd(DMA1_Channel5,ENABLE);
 800046a:	4816      	ldr	r0, [pc, #88]	; (80004c4 <rec_data+0xbc>)
 800046c:	2101      	movs	r1, #1
 800046e:	f000 f8a9 	bl	80005c4 <DMA_Cmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:166
	 /*enabling the Rx request for DMA*/
	//since the DMA's is now enabled, we poll the transfer complete bit
	while((DMA_GetFlagStatus(DMA1_FLAG_TC5)==RESET));
 8000472:	bf00      	nop
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:166 (discriminator 1)
 8000474:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000478:	f000 f8c0 	bl	80005fc <DMA_GetFlagStatus>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f8      	beq.n	8000474 <rec_data+0x6c>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:168
	//disable the DMA
	DMA_ClearFlag(DMA1_FLAG_TC5);
 8000482:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000486:	f000 f8e3 	bl	8000650 <DMA_ClearFlag>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:169
	DMA_Cmd(DMA1_Channel5,DISABLE);
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <rec_data+0xbc>)
 800048c:	2100      	movs	r1, #0
 800048e:	f000 f899 	bl	80005c4 <DMA_Cmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:171
	//disabling the UART also
	USART_DMACmd(USART1,USART_DMAReq_Rx,DISABLE);
 8000492:	4808      	ldr	r0, [pc, #32]	; (80004b4 <rec_data+0xac>)
 8000494:	2140      	movs	r1, #64	; 0x40
 8000496:	2200      	movs	r2, #0
 8000498:	f000 fc10 	bl	8000cbc <USART_DMACmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:172
	USART_Cmd(USART1,DISABLE);
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <rec_data+0xac>)
 800049e:	2100      	movs	r1, #0
 80004a0:	f000 fbec 	bl	8000c7c <USART_Cmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:173
	USART_DeInit(USART1);
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <rec_data+0xac>)
 80004a6:	f000 fad3 	bl	8000a50 <USART_DeInit>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:174
	return buffer;
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <rec_data+0xb8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:175
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40013800 	.word	0x40013800
 80004b8:	20000020 	.word	0x20000020
 80004bc:	40013804 	.word	0x40013804
 80004c0:	20000018 	.word	0x20000018
 80004c4:	40020058 	.word	0x40020058

080004c8 <set_bits>:
set_bits():
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:179


void set_bits()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:181
	GPIO_InitTypeDef gpio;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 80004ce:	2008      	movs	r0, #8
 80004d0:	2101      	movs	r1, #1
 80004d2:	f000 fa63 	bl	800099c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:182
	gpio.GPIO_Pin=GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 ;
 80004d6:	2338      	movs	r3, #56	; 0x38
 80004d8:	80bb      	strh	r3, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:183
	gpio.GPIO_Mode=GPIO_Mode_Out_PP;
 80004da:	2310      	movs	r3, #16
 80004dc:	71fb      	strb	r3, [r7, #7]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:184
	gpio.GPIO_Speed=GPIO_Speed_50MHz;
 80004de:	2303      	movs	r3, #3
 80004e0:	71bb      	strb	r3, [r7, #6]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:185
	GPIO_Init(GPIOC, &gpio);
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <set_bits+0x44>)
 80004e6:	4619      	mov	r1, r3
 80004e8:	f000 f8cc 	bl	8000684 <GPIO_Init>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:186
	GPIOB->ODR&=0;
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <set_bits+0x48>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <set_bits+0x48>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:187
	GPIOB->ODR|=a;
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <set_bits+0x48>)
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <set_bits+0x48>)
 80004fa:	68d1      	ldr	r1, [r2, #12]
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <set_bits+0x4c>)
 80004fe:	8812      	ldrh	r2, [r2, #0]
 8000500:	430a      	orrs	r2, r1
 8000502:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:189

}
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40011000 	.word	0x40011000
 8000510:	40010c00 	.word	0x40010c00
 8000514:	20000014 	.word	0x20000014

08000518 <TimingDelay_Decrement>:
TimingDelay_Decrement():
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:209
    ;
}

void
TimingDelay_Decrement(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:210
  if (uwTimingDelay != 0x00)
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <TimingDelay_Decrement+0x20>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d004      	beq.n	800052e <TimingDelay_Decrement+0x16>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:212
    {
      uwTimingDelay--;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <TimingDelay_Decrement+0x20>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1e5a      	subs	r2, r3, #1
 800052a:	4b03      	ldr	r3, [pc, #12]	; (8000538 <TimingDelay_Decrement+0x20>)
 800052c:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:214
    }
}
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000001c 	.word	0x2000001c

0800053c <SysTick_Handler>:
SysTick_Handler():
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:218

void
SysTick_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:219
  TimingDelay_Decrement();
 8000540:	f7ff ffea 	bl	8000518 <TimingDelay_Decrement>
/home/kartik/workspaceSTM32/stepper/Debug/../src/main.c:220
}
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop

08000548 <DMA_Init>:
DMA_Init():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:203
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:204
  uint32_t tmpreg = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:220
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:222
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000566:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	6a1b      	ldr	r3, [r3, #32]
 8000570:	431a      	orrs	r2, r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:233
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	691b      	ldr	r3, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000576:	431a      	orrs	r2, r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:233
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	431a      	orrs	r2, r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:234
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	699b      	ldr	r3, [r3, #24]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:233
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000582:	431a      	orrs	r2, r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:234
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	431a      	orrs	r2, r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:235
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:234
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800058e:	431a      	orrs	r2, r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:235
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000594:	4313      	orrs	r3, r2
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	4313      	orrs	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:238
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:242

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	68da      	ldr	r2, [r3, #12]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:246

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:250

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	685a      	ldr	r2, [r3, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:251
}
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <DMA_Cmd>:
DMA_Cmd():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:295
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:300
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <DMA_Cmd+0x20>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:303
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f043 0201 	orr.w	r2, r3, #1
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e006      	b.n	80005f2 <DMA_Cmd+0x2e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:308
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80005ec:	4013      	ands	r3, r2
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:310
  }
}
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <DMA_GetFlagStatus>:
DMA_GetFlagStatus():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:434
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:435
  FlagStatus bitstatus = RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:436
  uint32_t tmpreg = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:442
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <DMA_GetFlagStatus+0x22>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:445
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <DMA_GetFlagStatus+0x4c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	e002      	b.n	8000624 <DMA_GetFlagStatus+0x28>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:450
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <DMA_GetFlagStatus+0x50>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:454
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4013      	ands	r3, r2
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <DMA_GetFlagStatus+0x38>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:457
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800062e:	2301      	movs	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e001      	b.n	8000638 <DMA_GetFlagStatus+0x3c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:462
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:466
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:467
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40020400 	.word	0x40020400
 800064c:	40020000 	.word	0x40020000

08000650 <DMA_ClearFlag>:
DMA_ClearFlag():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:524
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:529
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d003      	beq.n	800066a <DMA_ClearFlag+0x1a>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:532
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <DMA_ClearFlag+0x2c>)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	e002      	b.n	8000670 <DMA_ClearFlag+0x20>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:537
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <DMA_ClearFlag+0x30>)
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_dma.c:539
  }
}
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40020400 	.word	0x40020400
 8000680:	40020000 	.word	0x40020000

08000684 <GPIO_Init>:
GPIO_Init():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:174
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:175
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:176
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:183
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	78db      	ldrb	r3, [r3, #3]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	61fb      	str	r3, [r7, #28]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:184
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <GPIO_Init+0x42>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:189
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	69fa      	ldr	r2, [r7, #28]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	61fb      	str	r3, [r7, #28]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:193
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d044      	beq.n	800075a <GPIO_Init+0xd6>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:195
  {
    tmpreg = GPIOx->CRL;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:196
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	e038      	b.n	800074e <GPIO_Init+0xca>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:198
    {
      pos = ((uint32_t)0x01) << pinpos;
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	2201      	movs	r2, #1
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:200
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4013      	ands	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:201
      if (currentpin == pos)
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d126      	bne.n	8000748 <GPIO_Init+0xc4>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:203
      {
        pos = pinpos << 2;
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:205
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	220f      	movs	r2, #15
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:206
        tmpreg &= ~pinmask;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	43db      	mvns	r3, r3
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	4013      	ands	r3, r2
 8000712:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:208
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	4313      	orrs	r3, r2
 8000720:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:210
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	78db      	ldrb	r3, [r3, #3]
 8000726:	2b28      	cmp	r3, #40	; 0x28
 8000728:	d105      	bne.n	8000736 <GPIO_Init+0xb2>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:212
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	2201      	movs	r2, #1
 800072e:	409a      	lsls	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	e008      	b.n	8000748 <GPIO_Init+0xc4>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:217
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	78db      	ldrb	r3, [r3, #3]
 800073a:	2b48      	cmp	r3, #72	; 0x48
 800073c:	d104      	bne.n	8000748 <GPIO_Init+0xc4>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:219
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	2201      	movs	r2, #1
 8000742:	409a      	lsls	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	611a      	str	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:196
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	3301      	adds	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:196 (discriminator 1)
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	2b07      	cmp	r3, #7
 8000752:	d9c3      	bls.n	80006dc <GPIO_Init+0x58>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:224
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:228
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2bff      	cmp	r3, #255	; 0xff
 8000760:	d946      	bls.n	80007f0 <GPIO_Init+0x16c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:230
  {
    tmpreg = GPIOx->CRH;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:231
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	e03a      	b.n	80007e4 <GPIO_Init+0x160>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:233
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	3308      	adds	r3, #8
 8000772:	2201      	movs	r2, #1
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:235
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4013      	ands	r3, r2
 8000784:	613b      	str	r3, [r7, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:236
      if (currentpin == pos)
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	429a      	cmp	r2, r3
 800078c:	d127      	bne.n	80007de <GPIO_Init+0x15a>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:238
      {
        pos = pinpos << 2;
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:240
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	220f      	movs	r2, #15
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:241
        tmpreg &= ~pinmask;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	43db      	mvns	r3, r3
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	4013      	ands	r3, r2
 80007a6:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:243
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	69fa      	ldr	r2, [r7, #28]
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:245
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	78db      	ldrb	r3, [r3, #3]
 80007ba:	2b28      	cmp	r3, #40	; 0x28
 80007bc:	d105      	bne.n	80007ca <GPIO_Init+0x146>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:247
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	3308      	adds	r3, #8
 80007c2:	2201      	movs	r2, #1
 80007c4:	409a      	lsls	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	615a      	str	r2, [r3, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:250
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	78db      	ldrb	r3, [r3, #3]
 80007ce:	2b48      	cmp	r3, #72	; 0x48
 80007d0:	d105      	bne.n	80007de <GPIO_Init+0x15a>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:252
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	3308      	adds	r3, #8
 80007d6:	2201      	movs	r2, #1
 80007d8:	409a      	lsls	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	611a      	str	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:231
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:231 (discriminator 1)
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	d9c1      	bls.n	800076e <GPIO_Init+0xea>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:256
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_gpio.c:258
  }
}
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:909
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:910
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:921
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000814:	4b4d      	ldr	r3, [pc, #308]	; (800094c <RCC_GetClocksFreq+0x150>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 030c 	and.w	r3, r3, #12
 800081c:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:923
  
  switch (tmp)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2b04      	cmp	r3, #4
 8000822:	d007      	beq.n	8000834 <RCC_GetClocksFreq+0x38>
 8000824:	2b08      	cmp	r3, #8
 8000826:	d009      	beq.n	800083c <RCC_GetClocksFreq+0x40>
 8000828:	2b00      	cmp	r3, #0
 800082a:	d134      	bne.n	8000896 <RCC_GetClocksFreq+0x9a>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:926
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a48      	ldr	r2, [pc, #288]	; (8000950 <RCC_GetClocksFreq+0x154>)
 8000830:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:927
      break;
 8000832:	e034      	b.n	800089e <RCC_GetClocksFreq+0xa2>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:929
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a46      	ldr	r2, [pc, #280]	; (8000950 <RCC_GetClocksFreq+0x154>)
 8000838:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:930
      break;
 800083a:	e030      	b.n	800089e <RCC_GetClocksFreq+0xa2>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:934
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800083c:	4b43      	ldr	r3, [pc, #268]	; (800094c <RCC_GetClocksFreq+0x150>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000844:	613b      	str	r3, [r7, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:935
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000846:	4b41      	ldr	r3, [pc, #260]	; (800094c <RCC_GetClocksFreq+0x150>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800084e:	60fb      	str	r3, [r7, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:938
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	0c9b      	lsrs	r3, r3, #18
 8000854:	3302      	adds	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:940
      
      if (pllsource == 0x00)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <RCC_GetClocksFreq+0x70>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:942
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	4a3c      	ldr	r2, [pc, #240]	; (8000954 <RCC_GetClocksFreq+0x158>)
 8000862:	fb02 f203 	mul.w	r2, r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	e013      	b.n	8000894 <RCC_GetClocksFreq+0x98>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:952
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800086c:	4b37      	ldr	r3, [pc, #220]	; (800094c <RCC_GetClocksFreq+0x150>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000874:	2b00      	cmp	r3, #0
 8000876:	d006      	beq.n	8000886 <RCC_GetClocksFreq+0x8a>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:954
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	4a36      	ldr	r2, [pc, #216]	; (8000954 <RCC_GetClocksFreq+0x158>)
 800087c:	fb02 f203 	mul.w	r2, r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e006      	b.n	8000894 <RCC_GetClocksFreq+0x98>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:958
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	4a31      	ldr	r2, [pc, #196]	; (8000950 <RCC_GetClocksFreq+0x154>)
 800088a:	fb02 f203 	mul.w	r2, r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:999
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000892:	e004      	b.n	800089e <RCC_GetClocksFreq+0xa2>
 8000894:	e003      	b.n	800089e <RCC_GetClocksFreq+0xa2>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1002

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <RCC_GetClocksFreq+0x154>)
 800089a:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1003
      break;
 800089c:	bf00      	nop
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1008
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <RCC_GetClocksFreq+0x150>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008a6:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1009
  tmp = tmp >> 4;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1010
  presc = APBAHBPrescTable[tmp];
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <RCC_GetClocksFreq+0x15c>)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1012
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	40da      	lsrs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1014
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <RCC_GetClocksFreq+0x150>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008ce:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1015
  tmp = tmp >> 8;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1016
  presc = APBAHBPrescTable[tmp];
 80008d6:	4a20      	ldr	r2, [pc, #128]	; (8000958 <RCC_GetClocksFreq+0x15c>)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1018
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	40da      	lsrs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1020
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <RCC_GetClocksFreq+0x150>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80008f6:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1021
  tmp = tmp >> 11;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	0adb      	lsrs	r3, r3, #11
 80008fc:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1022
  presc = APBAHBPrescTable[tmp];
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <RCC_GetClocksFreq+0x15c>)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1024
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685a      	ldr	r2, [r3, #4]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	40da      	lsrs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1026
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <RCC_GetClocksFreq+0x150>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091e:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1027
  tmp = tmp >> 14;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	0b9b      	lsrs	r3, r3, #14
 8000924:	617b      	str	r3, [r7, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1028
  presc = ADCPrescTable[tmp];
 8000926:	4a0d      	ldr	r2, [pc, #52]	; (800095c <RCC_GetClocksFreq+0x160>)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	60bb      	str	r3, [r7, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1030
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68da      	ldr	r2, [r3, #12]
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	fbb2 f2f3 	udiv	r2, r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	611a      	str	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1031
}
 8000940:	371c      	adds	r7, #28
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	007a1200 	.word	0x007a1200
 8000954:	003d0900 	.word	0x003d0900
 8000958:	20000000 	.word	0x20000000
 800095c:	20000010 	.word	0x20000010

08000960 <RCC_AHBPeriphClockCmd>:
RCC_AHBPeriphClockCmd():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1065
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	70fb      	strb	r3, [r7, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1070
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <RCC_AHBPeriphClockCmd+0x20>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1072
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <RCC_AHBPeriphClockCmd+0x38>)
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <RCC_AHBPeriphClockCmd+0x38>)
 8000976:	6951      	ldr	r1, [r2, #20]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	430a      	orrs	r2, r1
 800097c:	615a      	str	r2, [r3, #20]
 800097e:	e006      	b.n	800098e <RCC_AHBPeriphClockCmd+0x2e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1076
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <RCC_AHBPeriphClockCmd+0x38>)
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <RCC_AHBPeriphClockCmd+0x38>)
 8000984:	6951      	ldr	r1, [r2, #20]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	43d2      	mvns	r2, r2
 800098a:	400a      	ands	r2, r1
 800098c:	615a      	str	r2, [r3, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1078
  }
}
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000

0800099c <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1096
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1100
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d006      	beq.n	80009bc <RCC_APB2PeriphClockCmd+0x20>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1102
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <RCC_APB2PeriphClockCmd+0x38>)
 80009b0:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <RCC_APB2PeriphClockCmd+0x38>)
 80009b2:	6991      	ldr	r1, [r2, #24]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	619a      	str	r2, [r3, #24]
 80009ba:	e006      	b.n	80009ca <RCC_APB2PeriphClockCmd+0x2e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1106
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <RCC_APB2PeriphClockCmd+0x38>)
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <RCC_APB2PeriphClockCmd+0x38>)
 80009c0:	6991      	ldr	r1, [r2, #24]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	43d2      	mvns	r2, r2
 80009c6:	400a      	ands	r2, r1
 80009c8:	619a      	str	r2, [r3, #24]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1108
  }
}
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000

080009d8 <RCC_APB2PeriphResetCmd>:
RCC_APB2PeriphResetCmd():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1186
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1190
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <RCC_APB2PeriphResetCmd+0x20>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1192
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <RCC_APB2PeriphResetCmd+0x38>)
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <RCC_APB2PeriphResetCmd+0x38>)
 80009ee:	68d1      	ldr	r1, [r2, #12]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	e006      	b.n	8000a06 <RCC_APB2PeriphResetCmd+0x2e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1196
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <RCC_APB2PeriphResetCmd+0x38>)
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <RCC_APB2PeriphResetCmd+0x38>)
 80009fc:	68d1      	ldr	r1, [r2, #12]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	400a      	ands	r2, r1
 8000a04:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1198
  }
}
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <RCC_APB1PeriphResetCmd>:
RCC_APB1PeriphResetCmd():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1217
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1221
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d006      	beq.n	8000a34 <RCC_APB1PeriphResetCmd+0x20>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1223
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <RCC_APB1PeriphResetCmd+0x38>)
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <RCC_APB1PeriphResetCmd+0x38>)
 8000a2a:	6911      	ldr	r1, [r2, #16]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	611a      	str	r2, [r3, #16]
 8000a32:	e006      	b.n	8000a42 <RCC_APB1PeriphResetCmd+0x2e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1227
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <RCC_APB1PeriphResetCmd+0x38>)
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <RCC_APB1PeriphResetCmd+0x38>)
 8000a38:	6911      	ldr	r1, [r2, #16]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	400a      	ands	r2, r1
 8000a40:	611a      	str	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_rcc.c:1229
  }
}
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40021000 	.word	0x40021000

08000a50 <USART_DeInit>:
USART_DeInit():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:131
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:135
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <USART_DeInit+0xa4>)
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d10a      	bne.n	8000a76 <USART_DeInit+0x26>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:137
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000a60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a64:	2101      	movs	r1, #1
 8000a66:	f7ff ffb7 	bl	80009d8 <RCC_APB2PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:138
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000a6a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f7ff ffb2 	bl	80009d8 <RCC_APB2PeriphResetCmd>
 8000a74:	e03a      	b.n	8000aec <USART_DeInit+0x9c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:140
  }
  else if (USARTx == USART2)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <USART_DeInit+0xa8>)
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d10a      	bne.n	8000a94 <USART_DeInit+0x44>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:142
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000a7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a82:	2101      	movs	r1, #1
 8000a84:	f7ff ffc6 	bl	8000a14 <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:143
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000a88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f7ff ffc1 	bl	8000a14 <RCC_APB1PeriphResetCmd>
 8000a92:	e02b      	b.n	8000aec <USART_DeInit+0x9c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:145
  }
  else if (USARTx == USART3)
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <USART_DeInit+0xac>)
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d10a      	bne.n	8000ab2 <USART_DeInit+0x62>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:147
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000a9c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	f7ff ffb7 	bl	8000a14 <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:148
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000aa6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f7ff ffb2 	bl	8000a14 <RCC_APB1PeriphResetCmd>
 8000ab0:	e01c      	b.n	8000aec <USART_DeInit+0x9c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:150
  }    
  else if (USARTx == UART4)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <USART_DeInit+0xb0>)
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d10a      	bne.n	8000ad0 <USART_DeInit+0x80>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:152
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000aba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000abe:	2101      	movs	r1, #1
 8000ac0:	f7ff ffa8 	bl	8000a14 <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:153
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000ac4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f7ff ffa3 	bl	8000a14 <RCC_APB1PeriphResetCmd>
 8000ace:	e00d      	b.n	8000aec <USART_DeInit+0x9c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:157
  }    
  else
  {
    if (USARTx == UART5)
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <USART_DeInit+0xb4>)
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d109      	bne.n	8000aec <USART_DeInit+0x9c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:159
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000ad8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000adc:	2101      	movs	r1, #1
 8000ade:	f7ff ff99 	bl	8000a14 <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:160
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000ae2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f7ff ff94 	bl	8000a14 <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:163
    }
  }
}
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40004800 	.word	0x40004800
 8000b00:	40004c00 	.word	0x40004c00
 8000b04:	40005000 	.word	0x40005000

08000b08 <USART_Init>:
USART_Init():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:178
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:179
  uint32_t integerdivider = 0x00;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:180
  uint32_t fractionaldivider = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:181
  uint32_t usartxbase = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:197
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	61fb      	str	r3, [r7, #28]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:200

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	8a1b      	ldrh	r3, [r3, #16]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:202
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b34:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:205
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	88db      	ldrh	r3, [r3, #6]
 8000b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b42:	4313      	orrs	r3, r2
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:208
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	821a      	strh	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:211

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	899b      	ldrh	r3, [r3, #12]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:213
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b58:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:218
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	889a      	ldrh	r2, [r3, #4]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	891b      	ldrh	r3, [r3, #8]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b29a      	uxth	r2, r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:219
            USART_InitStruct->USART_Mode;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	895b      	ldrh	r3, [r3, #10]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:218
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b76:	4313      	orrs	r3, r2
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:221
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	819a      	strh	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:224

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	8a9b      	ldrh	r3, [r3, #20]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:226
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b8c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000b90:	4013      	ands	r3, r2
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:229
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	899b      	ldrh	r3, [r3, #12]
 8000b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:231
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	829a      	strh	r2, [r3, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:235

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fe26 	bl	80007fc <RCC_GetClocksFreq>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:236
  if (usartxbase == USART1_BASE)
 8000bb0:	69fa      	ldr	r2, [r7, #28]
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <USART_Init+0x16c>)
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d102      	bne.n	8000bbe <USART_Init+0xb6>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:238
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bbc:	e001      	b.n	8000bc2 <USART_Init+0xba>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:242
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:246
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	899b      	ldrh	r3, [r3, #12]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	da0c      	bge.n	8000bea <USART_Init+0xe2>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:249
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009a      	lsls	r2, r3, #2
 8000bda:	441a      	add	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
 8000be8:	e00b      	b.n	8000c02 <USART_Init+0xfa>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:254
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	009a      	lsls	r2, r3, #2
 8000bf4:	441a      	add	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:256
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <USART_Init+0x170>)
 8000c06:	fba3 1302 	umull	r1, r3, r3, r2
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:259

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	2264      	movs	r2, #100	; 0x64
 8000c16:	fb02 f303 	mul.w	r3, r2, r3
 8000c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	623b      	str	r3, [r7, #32]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:262

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	899b      	ldrh	r3, [r3, #12]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da0d      	bge.n	8000c4a <USART_Init+0x142>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:264
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <USART_Init+0x170>)
 8000c38:	fba3 1302 	umull	r1, r3, r3, r2
 8000c3c:	095b      	lsrs	r3, r3, #5
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c44:	4313      	orrs	r3, r2
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c48:	e00c      	b.n	8000c64 <USART_Init+0x15c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:268
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <USART_Init+0x170>)
 8000c54:	fba3 1302 	umull	r1, r3, r3, r2
 8000c58:	095b      	lsrs	r3, r3, #5
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c60:	4313      	orrs	r3, r2
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:272
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	811a      	strh	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:273
}
 8000c6c:	3730      	adds	r7, #48	; 0x30
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013800 	.word	0x40013800
 8000c78:	51eb851f 	.word	0x51eb851f

08000c7c <USART_Cmd>:
USART_Cmd():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:352
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:357
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c88:	78fb      	ldrb	r3, [r7, #3]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d008      	beq.n	8000ca0 <USART_Cmd+0x24>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:360
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	899b      	ldrh	r3, [r3, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	819a      	strh	r2, [r3, #12]
 8000c9e:	e007      	b.n	8000cb0 <USART_Cmd+0x34>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:365
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	899b      	ldrh	r3, [r3, #12]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	819a      	strh	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:367
  }
}
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <USART_DMACmd>:
USART_DMACmd():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:449
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	807a      	strh	r2, [r7, #2]
 8000cca:	707b      	strb	r3, [r7, #1]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:454
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8000ccc:	787b      	ldrb	r3, [r7, #1]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d008      	beq.n	8000ce4 <USART_DMACmd+0x28>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:458
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	8a9b      	ldrh	r3, [r3, #20]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	829a      	strh	r2, [r3, #20]
 8000ce2:	e009      	b.n	8000cf8 <USART_DMACmd+0x3c>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:464
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8a9b      	ldrh	r3, [r3, #20]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	829a      	strh	r2, [r3, #20]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/StdPeriph/src/stm32f10x_usart.c:466
  }
}
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <__libc_init_array>:
__libc_init_array():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 8000d0a:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <__libc_init_array+0x5c>)
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <__libc_init_array+0x60>)
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	109b      	asrs	r3, r3, #2
 8000d12:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	e007      	b.n	8000d2a <__libc_init_array+0x26>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:185 (discriminator 2)
    __preinit_array_start[i]();
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <__libc_init_array+0x60>)
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	4798      	blx	r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:184 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3301      	adds	r3, #1
 8000d28:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:184 (discriminator 1)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3f3      	bcc.n	8000d1a <__libc_init_array+0x16>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <__libc_init_array+0x64>)
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <__libc_init_array+0x68>)
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	109b      	asrs	r3, r3, #2
 8000d3a:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	e007      	b.n	8000d52 <__libc_init_array+0x4e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:194 (discriminator 2)
    __init_array_start[i]();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <__libc_init_array+0x68>)
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4a:	4798      	blx	r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:193 (discriminator 2)
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:193 (discriminator 1)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d3f3      	bcc.n	8000d42 <__libc_init_array+0x3e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	080001ec 	.word	0x080001ec
 8000d64:	080001e8 	.word	0x080001e8
 8000d68:	080001ec 	.word	0x080001ec
 8000d6c:	080001ec 	.word	0x080001ec

08000d70 <__libc_fini_array>:
__libc_fini_array():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <__libc_fini_array+0x34>)
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <__libc_fini_array+0x38>)
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	109b      	asrs	r3, r3, #2
 8000d7e:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	e008      	b.n	8000d98 <__libc_fini_array+0x28>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:206 (discriminator 2)
    __fini_array_start[i - 1]();
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <__libc_fini_array+0x38>)
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	4798      	blx	r3
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:205 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:205 (discriminator 1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f3      	bne.n	8000d86 <__libc_fini_array+0x16>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	080001ec 	.word	0x080001ec
 8000da8:	080001ec 	.word	0x080001ec

08000dac <_exit>:
_exit():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_stm32f10x.c:15
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/startup_stm32f10x.c:18 (discriminator 1)
#if defined(DEBUG)
  while(1)
  ;
 8000db4:	e7fe      	b.n	8000db4 <_exit+0x8>
 8000db6:	bf00      	nop

08000db8 <SystemInit>:
SystemInit():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:213
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:216
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <SystemInit+0x5c>)
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <SystemInit+0x5c>)
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	f042 0201 	orr.w	r2, r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:220

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000dc8:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <SystemInit+0x5c>)
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <SystemInit+0x5c>)
 8000dcc:	6859      	ldr	r1, [r3, #4]
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <SystemInit+0x60>)
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	6053      	str	r3, [r2, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:226
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <SystemInit+0x5c>)
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <SystemInit+0x5c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:229

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <SystemInit+0x5c>)
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <SystemInit+0x5c>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dee:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:232

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <SystemInit+0x5c>)
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <SystemInit+0x5c>)
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000dfa:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:251

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SystemInit+0x5c>)
 8000dfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e02:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:262
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000e04:	f000 f80c 	bl	8000e20 <SetSysClock>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:267

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SystemInit+0x64>)
 8000e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0e:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:269
#endif 
}
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	f8ff0000 	.word	0xf8ff0000
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <SetSysClock>:
SetSysClock():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:420
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:432
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000e24:	f000 f802 	bl	8000e2c <SetSysClockTo72>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:437
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop

08000e2c <SetSysClockTo72>:
SetSysClockTo72():
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:988
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:989
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:993
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000e3c:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e44:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:998 (discriminator 1)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:999 (discriminator 1)
    StartUpCounter++;  
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1000 (discriminator 1)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d103      	bne.n	8000e64 <SetSysClockTo72+0x38>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e62:	d1f0      	bne.n	8000e46 <SetSysClockTo72+0x1a>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1002

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <SetSysClockTo72+0x4a>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1004
  {
    HSEStatus = (uint32_t)0x01;
 8000e70:	2301      	movs	r3, #1
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	e001      	b.n	8000e7a <SetSysClockTo72+0x4e>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1008
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1011
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d14b      	bne.n	8000f18 <SetSysClockTo72+0xec>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1014
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <SetSysClockTo72+0xfc>)
 8000e82:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <SetSysClockTo72+0xfc>)
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	f042 0210 	orr.w	r2, r2, #16
 8000e8a:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1017

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <SetSysClockTo72+0xfc>)
 8000e8e:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <SetSysClockTo72+0xfc>)
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	f022 0203 	bic.w	r2, r2, #3
 8000e96:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1018
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <SetSysClockTo72+0xfc>)
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <SetSysClockTo72+0xfc>)
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	f042 0202 	orr.w	r2, r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1022

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ea8:	6852      	ldr	r2, [r2, #4]
 8000eaa:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1025
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000eb0:	6852      	ldr	r2, [r2, #4]
 8000eb2:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1028
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000eb8:	6852      	ldr	r2, [r2, #4]
 8000eba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ebe:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1054
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ec4:	6852      	ldr	r2, [r2, #4]
 8000ec6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000eca:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1056
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ed0:	6852      	ldr	r2, [r2, #4]
 8000ed2:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000ed6:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1060
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ee2:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1063

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ee4:	bf00      	nop
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1063 (discriminator 1)
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f9      	beq.n	8000ee6 <SetSysClockTo72+0xba>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1068
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000ef6:	6852      	ldr	r2, [r2, #4]
 8000ef8:	f022 0203 	bic.w	r2, r2, #3
 8000efc:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1069
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000f00:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000f02:	6852      	ldr	r2, [r2, #4]
 8000f04:	f042 0202 	orr.w	r2, r2, #2
 8000f08:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1072

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000f0a:	bf00      	nop
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1072 (discriminator 1)
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SetSysClockTo72+0xf8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d1f9      	bne.n	8000f0c <SetSysClockTo72+0xe0>
/home/kartik/workspaceSTM32/stepper/Debug/../libs/CMSIS/src/system_stm32f10x.c:1080
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40022000 	.word	0x40022000

08000f2c <__aeabi_drsub>:
$t():
 8000f2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000f30:	e002      	b.n	8000f38 <__adddf3>
 8000f32:	bf00      	nop

08000f34 <__aeabi_dsub>:
__aeabi_dsub():
 8000f34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000f38 <__adddf3>:
 8000f38:	b530      	push	{r4, r5, lr}
 8000f3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000f3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000f42:	ea94 0f05 	teq	r4, r5
 8000f46:	bf08      	it	eq
 8000f48:	ea90 0f02 	teqeq	r0, r2
 8000f4c:	bf1f      	itttt	ne
 8000f4e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000f52:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000f56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000f5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f5e:	f000 80e2 	beq.w	8001126 <__adddf3+0x1ee>
 8000f62:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000f66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000f6a:	bfb8      	it	lt
 8000f6c:	426d      	neglt	r5, r5
 8000f6e:	dd0c      	ble.n	8000f8a <__adddf3+0x52>
 8000f70:	442c      	add	r4, r5
 8000f72:	ea80 0202 	eor.w	r2, r0, r2
 8000f76:	ea81 0303 	eor.w	r3, r1, r3
 8000f7a:	ea82 0000 	eor.w	r0, r2, r0
 8000f7e:	ea83 0101 	eor.w	r1, r3, r1
 8000f82:	ea80 0202 	eor.w	r2, r0, r2
 8000f86:	ea81 0303 	eor.w	r3, r1, r3
 8000f8a:	2d36      	cmp	r5, #54	; 0x36
 8000f8c:	bf88      	it	hi
 8000f8e:	bd30      	pophi	{r4, r5, pc}
 8000f90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000f94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000f98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000f9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000fa0:	d002      	beq.n	8000fa8 <__adddf3+0x70>
 8000fa2:	4240      	negs	r0, r0
 8000fa4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000fac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000fb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000fb4:	d002      	beq.n	8000fbc <__adddf3+0x84>
 8000fb6:	4252      	negs	r2, r2
 8000fb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fbc:	ea94 0f05 	teq	r4, r5
 8000fc0:	f000 80a7 	beq.w	8001112 <__adddf3+0x1da>
 8000fc4:	f1a4 0401 	sub.w	r4, r4, #1
 8000fc8:	f1d5 0e20 	rsbs	lr, r5, #32
 8000fcc:	db0d      	blt.n	8000fea <__adddf3+0xb2>
 8000fce:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000fd2:	fa22 f205 	lsr.w	r2, r2, r5
 8000fd6:	1880      	adds	r0, r0, r2
 8000fd8:	f141 0100 	adc.w	r1, r1, #0
 8000fdc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000fe0:	1880      	adds	r0, r0, r2
 8000fe2:	fa43 f305 	asr.w	r3, r3, r5
 8000fe6:	4159      	adcs	r1, r3
 8000fe8:	e00e      	b.n	8001008 <__adddf3+0xd0>
 8000fea:	f1a5 0520 	sub.w	r5, r5, #32
 8000fee:	f10e 0e20 	add.w	lr, lr, #32
 8000ff2:	2a01      	cmp	r2, #1
 8000ff4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000ff8:	bf28      	it	cs
 8000ffa:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000ffe:	fa43 f305 	asr.w	r3, r3, r5
 8001002:	18c0      	adds	r0, r0, r3
 8001004:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8001008:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800100c:	d507      	bpl.n	800101e <__adddf3+0xe6>
 800100e:	f04f 0e00 	mov.w	lr, #0
 8001012:	f1dc 0c00 	rsbs	ip, ip, #0
 8001016:	eb7e 0000 	sbcs.w	r0, lr, r0
 800101a:	eb6e 0101 	sbc.w	r1, lr, r1
 800101e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001022:	d31b      	bcc.n	800105c <__adddf3+0x124>
 8001024:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001028:	d30c      	bcc.n	8001044 <__adddf3+0x10c>
 800102a:	0849      	lsrs	r1, r1, #1
 800102c:	ea5f 0030 	movs.w	r0, r0, rrx
 8001030:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001034:	f104 0401 	add.w	r4, r4, #1
 8001038:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800103c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001040:	f080 809a 	bcs.w	8001178 <__adddf3+0x240>
 8001044:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8001048:	bf08      	it	eq
 800104a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800104e:	f150 0000 	adcs.w	r0, r0, #0
 8001052:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001056:	ea41 0105 	orr.w	r1, r1, r5
 800105a:	bd30      	pop	{r4, r5, pc}
 800105c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001060:	4140      	adcs	r0, r0
 8001062:	eb41 0101 	adc.w	r1, r1, r1
 8001066:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800106a:	f1a4 0401 	sub.w	r4, r4, #1
 800106e:	d1e9      	bne.n	8001044 <__adddf3+0x10c>
 8001070:	f091 0f00 	teq	r1, #0
 8001074:	bf04      	itt	eq
 8001076:	4601      	moveq	r1, r0
 8001078:	2000      	moveq	r0, #0
 800107a:	fab1 f381 	clz	r3, r1
 800107e:	bf08      	it	eq
 8001080:	3320      	addeq	r3, #32
 8001082:	f1a3 030b 	sub.w	r3, r3, #11
 8001086:	f1b3 0220 	subs.w	r2, r3, #32
 800108a:	da0c      	bge.n	80010a6 <__adddf3+0x16e>
 800108c:	320c      	adds	r2, #12
 800108e:	dd08      	ble.n	80010a2 <__adddf3+0x16a>
 8001090:	f102 0c14 	add.w	ip, r2, #20
 8001094:	f1c2 020c 	rsb	r2, r2, #12
 8001098:	fa01 f00c 	lsl.w	r0, r1, ip
 800109c:	fa21 f102 	lsr.w	r1, r1, r2
 80010a0:	e00c      	b.n	80010bc <__adddf3+0x184>
 80010a2:	f102 0214 	add.w	r2, r2, #20
 80010a6:	bfd8      	it	le
 80010a8:	f1c2 0c20 	rsble	ip, r2, #32
 80010ac:	fa01 f102 	lsl.w	r1, r1, r2
 80010b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010b4:	bfdc      	itt	le
 80010b6:	ea41 010c 	orrle.w	r1, r1, ip
 80010ba:	4090      	lslle	r0, r2
 80010bc:	1ae4      	subs	r4, r4, r3
 80010be:	bfa2      	ittt	ge
 80010c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80010c4:	4329      	orrge	r1, r5
 80010c6:	bd30      	popge	{r4, r5, pc}
 80010c8:	ea6f 0404 	mvn.w	r4, r4
 80010cc:	3c1f      	subs	r4, #31
 80010ce:	da1c      	bge.n	800110a <__adddf3+0x1d2>
 80010d0:	340c      	adds	r4, #12
 80010d2:	dc0e      	bgt.n	80010f2 <__adddf3+0x1ba>
 80010d4:	f104 0414 	add.w	r4, r4, #20
 80010d8:	f1c4 0220 	rsb	r2, r4, #32
 80010dc:	fa20 f004 	lsr.w	r0, r0, r4
 80010e0:	fa01 f302 	lsl.w	r3, r1, r2
 80010e4:	ea40 0003 	orr.w	r0, r0, r3
 80010e8:	fa21 f304 	lsr.w	r3, r1, r4
 80010ec:	ea45 0103 	orr.w	r1, r5, r3
 80010f0:	bd30      	pop	{r4, r5, pc}
 80010f2:	f1c4 040c 	rsb	r4, r4, #12
 80010f6:	f1c4 0220 	rsb	r2, r4, #32
 80010fa:	fa20 f002 	lsr.w	r0, r0, r2
 80010fe:	fa01 f304 	lsl.w	r3, r1, r4
 8001102:	ea40 0003 	orr.w	r0, r0, r3
 8001106:	4629      	mov	r1, r5
 8001108:	bd30      	pop	{r4, r5, pc}
 800110a:	fa21 f004 	lsr.w	r0, r1, r4
 800110e:	4629      	mov	r1, r5
 8001110:	bd30      	pop	{r4, r5, pc}
 8001112:	f094 0f00 	teq	r4, #0
 8001116:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800111a:	bf06      	itte	eq
 800111c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8001120:	3401      	addeq	r4, #1
 8001122:	3d01      	subne	r5, #1
 8001124:	e74e      	b.n	8000fc4 <__adddf3+0x8c>
 8001126:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800112a:	bf18      	it	ne
 800112c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001130:	d029      	beq.n	8001186 <__adddf3+0x24e>
 8001132:	ea94 0f05 	teq	r4, r5
 8001136:	bf08      	it	eq
 8001138:	ea90 0f02 	teqeq	r0, r2
 800113c:	d005      	beq.n	800114a <__adddf3+0x212>
 800113e:	ea54 0c00 	orrs.w	ip, r4, r0
 8001142:	bf04      	itt	eq
 8001144:	4619      	moveq	r1, r3
 8001146:	4610      	moveq	r0, r2
 8001148:	bd30      	pop	{r4, r5, pc}
 800114a:	ea91 0f03 	teq	r1, r3
 800114e:	bf1e      	ittt	ne
 8001150:	2100      	movne	r1, #0
 8001152:	2000      	movne	r0, #0
 8001154:	bd30      	popne	{r4, r5, pc}
 8001156:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800115a:	d105      	bne.n	8001168 <__adddf3+0x230>
 800115c:	0040      	lsls	r0, r0, #1
 800115e:	4149      	adcs	r1, r1
 8001160:	bf28      	it	cs
 8001162:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8001166:	bd30      	pop	{r4, r5, pc}
 8001168:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800116c:	bf3c      	itt	cc
 800116e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001172:	bd30      	popcc	{r4, r5, pc}
 8001174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001178:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800117c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	bd30      	pop	{r4, r5, pc}
 8001186:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800118a:	bf1a      	itte	ne
 800118c:	4619      	movne	r1, r3
 800118e:	4610      	movne	r0, r2
 8001190:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001194:	bf1c      	itt	ne
 8001196:	460b      	movne	r3, r1
 8001198:	4602      	movne	r2, r0
 800119a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800119e:	bf06      	itte	eq
 80011a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80011a4:	ea91 0f03 	teqeq	r1, r3
 80011a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80011ac:	bd30      	pop	{r4, r5, pc}
__adddf3():
 80011ae:	bf00      	nop

080011b0 <__aeabi_ui2d>:
__aeabi_ui2d():
 80011b0:	f090 0f00 	teq	r0, #0
 80011b4:	bf04      	itt	eq
 80011b6:	2100      	moveq	r1, #0
 80011b8:	4770      	bxeq	lr
 80011ba:	b530      	push	{r4, r5, lr}
 80011bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80011c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80011c4:	f04f 0500 	mov.w	r5, #0
 80011c8:	f04f 0100 	mov.w	r1, #0
 80011cc:	e750      	b.n	8001070 <__adddf3+0x138>
 80011ce:	bf00      	nop

080011d0 <__aeabi_i2d>:
__floatsidf():
 80011d0:	f090 0f00 	teq	r0, #0
 80011d4:	bf04      	itt	eq
 80011d6:	2100      	moveq	r1, #0
 80011d8:	4770      	bxeq	lr
 80011da:	b530      	push	{r4, r5, lr}
 80011dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80011e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80011e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80011e8:	bf48      	it	mi
 80011ea:	4240      	negmi	r0, r0
 80011ec:	f04f 0100 	mov.w	r1, #0
 80011f0:	e73e      	b.n	8001070 <__adddf3+0x138>
 80011f2:	bf00      	nop

080011f4 <__aeabi_f2d>:
__extendsfdf2():
 80011f4:	0042      	lsls	r2, r0, #1
 80011f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80011fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80011fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8001202:	bf1f      	itttt	ne
 8001204:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001208:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800120c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001210:	4770      	bxne	lr
 8001212:	f092 0f00 	teq	r2, #0
 8001216:	bf14      	ite	ne
 8001218:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800121c:	4770      	bxeq	lr
 800121e:	b530      	push	{r4, r5, lr}
 8001220:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001228:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800122c:	e720      	b.n	8001070 <__adddf3+0x138>
 800122e:	bf00      	nop

08001230 <__aeabi_ul2d>:
__aeabi_ul2d():
 8001230:	ea50 0201 	orrs.w	r2, r0, r1
 8001234:	bf08      	it	eq
 8001236:	4770      	bxeq	lr
 8001238:	b530      	push	{r4, r5, lr}
 800123a:	f04f 0500 	mov.w	r5, #0
 800123e:	e00a      	b.n	8001256 <__aeabi_l2d+0x16>

08001240 <__aeabi_l2d>:
 8001240:	ea50 0201 	orrs.w	r2, r0, r1
 8001244:	bf08      	it	eq
 8001246:	4770      	bxeq	lr
 8001248:	b530      	push	{r4, r5, lr}
 800124a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800124e:	d502      	bpl.n	8001256 <__aeabi_l2d+0x16>
 8001250:	4240      	negs	r0, r0
 8001252:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001256:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800125a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800125e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001262:	f43f aedc 	beq.w	800101e <__adddf3+0xe6>
 8001266:	f04f 0203 	mov.w	r2, #3
 800126a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800126e:	bf18      	it	ne
 8001270:	3203      	addne	r2, #3
 8001272:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001276:	bf18      	it	ne
 8001278:	3203      	addne	r2, #3
 800127a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800127e:	f1c2 0320 	rsb	r3, r2, #32
 8001282:	fa00 fc03 	lsl.w	ip, r0, r3
 8001286:	fa20 f002 	lsr.w	r0, r0, r2
 800128a:	fa01 fe03 	lsl.w	lr, r1, r3
 800128e:	ea40 000e 	orr.w	r0, r0, lr
 8001292:	fa21 f102 	lsr.w	r1, r1, r2
 8001296:	4414      	add	r4, r2
 8001298:	e6c1      	b.n	800101e <__adddf3+0xe6>
__floatdidf():
 800129a:	bf00      	nop

0800129c <__aeabi_dmul>:
__aeabi_dmul():
 800129c:	b570      	push	{r4, r5, r6, lr}
 800129e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80012a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80012aa:	bf1d      	ittte	ne
 80012ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80012b0:	ea94 0f0c 	teqne	r4, ip
 80012b4:	ea95 0f0c 	teqne	r5, ip
 80012b8:	f000 f8de 	bleq	8001478 <__aeabi_dmul+0x1dc>
 80012bc:	442c      	add	r4, r5
 80012be:	ea81 0603 	eor.w	r6, r1, r3
 80012c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80012c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80012ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80012ce:	bf18      	it	ne
 80012d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80012d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80012d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012dc:	d038      	beq.n	8001350 <__aeabi_dmul+0xb4>
 80012de:	fba0 ce02 	umull	ip, lr, r0, r2
 80012e2:	f04f 0500 	mov.w	r5, #0
 80012e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80012ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80012ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80012f2:	f04f 0600 	mov.w	r6, #0
 80012f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80012fa:	f09c 0f00 	teq	ip, #0
 80012fe:	bf18      	it	ne
 8001300:	f04e 0e01 	orrne.w	lr, lr, #1
 8001304:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001308:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800130c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001310:	d204      	bcs.n	800131c <__aeabi_dmul+0x80>
 8001312:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001316:	416d      	adcs	r5, r5
 8001318:	eb46 0606 	adc.w	r6, r6, r6
 800131c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001320:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001324:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001328:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800132c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001330:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001334:	bf88      	it	hi
 8001336:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800133a:	d81e      	bhi.n	800137a <__aeabi_dmul+0xde>
 800133c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001340:	bf08      	it	eq
 8001342:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001346:	f150 0000 	adcs.w	r0, r0, #0
 800134a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800134e:	bd70      	pop	{r4, r5, r6, pc}
 8001350:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001354:	ea46 0101 	orr.w	r1, r6, r1
 8001358:	ea40 0002 	orr.w	r0, r0, r2
 800135c:	ea81 0103 	eor.w	r1, r1, r3
 8001360:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001364:	bfc2      	ittt	gt
 8001366:	ebd4 050c 	rsbsgt	r5, r4, ip
 800136a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800136e:	bd70      	popgt	{r4, r5, r6, pc}
 8001370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001374:	f04f 0e00 	mov.w	lr, #0
 8001378:	3c01      	subs	r4, #1
 800137a:	f300 80ab 	bgt.w	80014d4 <__aeabi_dmul+0x238>
 800137e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8001382:	bfde      	ittt	le
 8001384:	2000      	movle	r0, #0
 8001386:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800138a:	bd70      	pople	{r4, r5, r6, pc}
 800138c:	f1c4 0400 	rsb	r4, r4, #0
 8001390:	3c20      	subs	r4, #32
 8001392:	da35      	bge.n	8001400 <__aeabi_dmul+0x164>
 8001394:	340c      	adds	r4, #12
 8001396:	dc1b      	bgt.n	80013d0 <__aeabi_dmul+0x134>
 8001398:	f104 0414 	add.w	r4, r4, #20
 800139c:	f1c4 0520 	rsb	r5, r4, #32
 80013a0:	fa00 f305 	lsl.w	r3, r0, r5
 80013a4:	fa20 f004 	lsr.w	r0, r0, r4
 80013a8:	fa01 f205 	lsl.w	r2, r1, r5
 80013ac:	ea40 0002 	orr.w	r0, r0, r2
 80013b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80013b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80013bc:	fa21 f604 	lsr.w	r6, r1, r4
 80013c0:	eb42 0106 	adc.w	r1, r2, r6
 80013c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80013c8:	bf08      	it	eq
 80013ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	f1c4 040c 	rsb	r4, r4, #12
 80013d4:	f1c4 0520 	rsb	r5, r4, #32
 80013d8:	fa00 f304 	lsl.w	r3, r0, r4
 80013dc:	fa20 f005 	lsr.w	r0, r0, r5
 80013e0:	fa01 f204 	lsl.w	r2, r1, r4
 80013e4:	ea40 0002 	orr.w	r0, r0, r2
 80013e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80013ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80013f0:	f141 0100 	adc.w	r1, r1, #0
 80013f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80013f8:	bf08      	it	eq
 80013fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	f1c4 0520 	rsb	r5, r4, #32
 8001404:	fa00 f205 	lsl.w	r2, r0, r5
 8001408:	ea4e 0e02 	orr.w	lr, lr, r2
 800140c:	fa20 f304 	lsr.w	r3, r0, r4
 8001410:	fa01 f205 	lsl.w	r2, r1, r5
 8001414:	ea43 0302 	orr.w	r3, r3, r2
 8001418:	fa21 f004 	lsr.w	r0, r1, r4
 800141c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001420:	fa21 f204 	lsr.w	r2, r1, r4
 8001424:	ea20 0002 	bic.w	r0, r0, r2
 8001428:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800142c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001430:	bf08      	it	eq
 8001432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	f094 0f00 	teq	r4, #0
 800143c:	d10f      	bne.n	800145e <__aeabi_dmul+0x1c2>
 800143e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8001442:	0040      	lsls	r0, r0, #1
 8001444:	eb41 0101 	adc.w	r1, r1, r1
 8001448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800144c:	bf08      	it	eq
 800144e:	3c01      	subeq	r4, #1
 8001450:	d0f7      	beq.n	8001442 <__aeabi_dmul+0x1a6>
 8001452:	ea41 0106 	orr.w	r1, r1, r6
 8001456:	f095 0f00 	teq	r5, #0
 800145a:	bf18      	it	ne
 800145c:	4770      	bxne	lr
 800145e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8001462:	0052      	lsls	r2, r2, #1
 8001464:	eb43 0303 	adc.w	r3, r3, r3
 8001468:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800146c:	bf08      	it	eq
 800146e:	3d01      	subeq	r5, #1
 8001470:	d0f7      	beq.n	8001462 <__aeabi_dmul+0x1c6>
 8001472:	ea43 0306 	orr.w	r3, r3, r6
 8001476:	4770      	bx	lr
 8001478:	ea94 0f0c 	teq	r4, ip
 800147c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001480:	bf18      	it	ne
 8001482:	ea95 0f0c 	teqne	r5, ip
 8001486:	d00c      	beq.n	80014a2 <__aeabi_dmul+0x206>
 8001488:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800148c:	bf18      	it	ne
 800148e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001492:	d1d1      	bne.n	8001438 <__aeabi_dmul+0x19c>
 8001494:	ea81 0103 	eor.w	r1, r1, r3
 8001498:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80014a6:	bf06      	itte	eq
 80014a8:	4610      	moveq	r0, r2
 80014aa:	4619      	moveq	r1, r3
 80014ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80014b0:	d019      	beq.n	80014e6 <__aeabi_dmul+0x24a>
 80014b2:	ea94 0f0c 	teq	r4, ip
 80014b6:	d102      	bne.n	80014be <__aeabi_dmul+0x222>
 80014b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80014bc:	d113      	bne.n	80014e6 <__aeabi_dmul+0x24a>
 80014be:	ea95 0f0c 	teq	r5, ip
 80014c2:	d105      	bne.n	80014d0 <__aeabi_dmul+0x234>
 80014c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80014c8:	bf1c      	itt	ne
 80014ca:	4610      	movne	r0, r2
 80014cc:	4619      	movne	r1, r3
 80014ce:	d10a      	bne.n	80014e6 <__aeabi_dmul+0x24a>
 80014d0:	ea81 0103 	eor.w	r1, r1, r3
 80014d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80014d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80014dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014e0:	f04f 0000 	mov.w	r0, #0
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
 80014e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80014ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80014ee:	bd70      	pop	{r4, r5, r6, pc}

080014f0 <__aeabi_ddiv>:
__aeabi_ddiv():
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80014f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80014fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80014fe:	bf1d      	ittte	ne
 8001500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001504:	ea94 0f0c 	teqne	r4, ip
 8001508:	ea95 0f0c 	teqne	r5, ip
 800150c:	f000 f8a7 	bleq	800165e <__aeabi_ddiv+0x16e>
 8001510:	eba4 0405 	sub.w	r4, r4, r5
 8001514:	ea81 0e03 	eor.w	lr, r1, r3
 8001518:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800151c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001520:	f000 8088 	beq.w	8001634 <__aeabi_ddiv+0x144>
 8001524:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001528:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800152c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001530:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001534:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001538:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800153c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001540:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001544:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001548:	429d      	cmp	r5, r3
 800154a:	bf08      	it	eq
 800154c:	4296      	cmpeq	r6, r2
 800154e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8001552:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001556:	d202      	bcs.n	800155e <__aeabi_ddiv+0x6e>
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	ea4f 0232 	mov.w	r2, r2, rrx
 800155e:	1ab6      	subs	r6, r6, r2
 8001560:	eb65 0503 	sbc.w	r5, r5, r3
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	ea4f 0232 	mov.w	r2, r2, rrx
 800156a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800156e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001572:	ebb6 0e02 	subs.w	lr, r6, r2
 8001576:	eb75 0e03 	sbcs.w	lr, r5, r3
 800157a:	bf22      	ittt	cs
 800157c:	1ab6      	subcs	r6, r6, r2
 800157e:	4675      	movcs	r5, lr
 8001580:	ea40 000c 	orrcs.w	r0, r0, ip
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	ea4f 0232 	mov.w	r2, r2, rrx
 800158a:	ebb6 0e02 	subs.w	lr, r6, r2
 800158e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001592:	bf22      	ittt	cs
 8001594:	1ab6      	subcs	r6, r6, r2
 8001596:	4675      	movcs	r5, lr
 8001598:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	ea4f 0232 	mov.w	r2, r2, rrx
 80015a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80015a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80015aa:	bf22      	ittt	cs
 80015ac:	1ab6      	subcs	r6, r6, r2
 80015ae:	4675      	movcs	r5, lr
 80015b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80015b4:	085b      	lsrs	r3, r3, #1
 80015b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80015ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80015be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80015c2:	bf22      	ittt	cs
 80015c4:	1ab6      	subcs	r6, r6, r2
 80015c6:	4675      	movcs	r5, lr
 80015c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80015cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80015d0:	d018      	beq.n	8001604 <__aeabi_ddiv+0x114>
 80015d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80015d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80015da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80015de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80015e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80015e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80015ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80015ee:	d1c0      	bne.n	8001572 <__aeabi_ddiv+0x82>
 80015f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80015f4:	d10b      	bne.n	800160e <__aeabi_ddiv+0x11e>
 80015f6:	ea41 0100 	orr.w	r1, r1, r0
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8001602:	e7b6      	b.n	8001572 <__aeabi_ddiv+0x82>
 8001604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001608:	bf04      	itt	eq
 800160a:	4301      	orreq	r1, r0
 800160c:	2000      	moveq	r0, #0
 800160e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001612:	bf88      	it	hi
 8001614:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001618:	f63f aeaf 	bhi.w	800137a <__aeabi_dmul+0xde>
 800161c:	ebb5 0c03 	subs.w	ip, r5, r3
 8001620:	bf04      	itt	eq
 8001622:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001626:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800162a:	f150 0000 	adcs.w	r0, r0, #0
 800162e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001632:	bd70      	pop	{r4, r5, r6, pc}
 8001634:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001638:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800163c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001640:	bfc2      	ittt	gt
 8001642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800164a:	bd70      	popgt	{r4, r5, r6, pc}
 800164c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001650:	f04f 0e00 	mov.w	lr, #0
 8001654:	3c01      	subs	r4, #1
 8001656:	e690      	b.n	800137a <__aeabi_dmul+0xde>
 8001658:	ea45 0e06 	orr.w	lr, r5, r6
 800165c:	e68d      	b.n	800137a <__aeabi_dmul+0xde>
 800165e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001662:	ea94 0f0c 	teq	r4, ip
 8001666:	bf08      	it	eq
 8001668:	ea95 0f0c 	teqeq	r5, ip
 800166c:	f43f af3b 	beq.w	80014e6 <__aeabi_dmul+0x24a>
 8001670:	ea94 0f0c 	teq	r4, ip
 8001674:	d10a      	bne.n	800168c <__aeabi_ddiv+0x19c>
 8001676:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800167a:	f47f af34 	bne.w	80014e6 <__aeabi_dmul+0x24a>
 800167e:	ea95 0f0c 	teq	r5, ip
 8001682:	f47f af25 	bne.w	80014d0 <__aeabi_dmul+0x234>
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	e72c      	b.n	80014e6 <__aeabi_dmul+0x24a>
 800168c:	ea95 0f0c 	teq	r5, ip
 8001690:	d106      	bne.n	80016a0 <__aeabi_ddiv+0x1b0>
 8001692:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001696:	f43f aefd 	beq.w	8001494 <__aeabi_dmul+0x1f8>
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	e722      	b.n	80014e6 <__aeabi_dmul+0x24a>
 80016a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80016a4:	bf18      	it	ne
 80016a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80016aa:	f47f aec5 	bne.w	8001438 <__aeabi_dmul+0x19c>
 80016ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80016b2:	f47f af0d 	bne.w	80014d0 <__aeabi_dmul+0x234>
 80016b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80016ba:	f47f aeeb 	bne.w	8001494 <__aeabi_dmul+0x1f8>
 80016be:	e712      	b.n	80014e6 <__aeabi_dmul+0x24a>

080016c0 <__aeabi_d2iz>:
__fixdfsi():
 80016c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80016c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80016c8:	d215      	bcs.n	80016f6 <__aeabi_d2iz+0x36>
 80016ca:	d511      	bpl.n	80016f0 <__aeabi_d2iz+0x30>
 80016cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80016d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80016d4:	d912      	bls.n	80016fc <__aeabi_d2iz+0x3c>
 80016d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80016da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80016e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80016e6:	fa23 f002 	lsr.w	r0, r3, r2
 80016ea:	bf18      	it	ne
 80016ec:	4240      	negne	r0, r0
 80016ee:	4770      	bx	lr
 80016f0:	f04f 0000 	mov.w	r0, #0
 80016f4:	4770      	bx	lr
 80016f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80016fa:	d105      	bne.n	8001708 <__aeabi_d2iz+0x48>
 80016fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001700:	bf08      	it	eq
 8001702:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001706:	4770      	bx	lr
 8001708:	f04f 0000 	mov.w	r0, #0
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
