
stepper.elf:     file format elf32-littlearm
stepper.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000135

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00001080 memsz 0x00001080 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08001080 align 2**15
         filesz 0x00000014 memsz 0x00000170 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000178  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  08000178  08000178  00008178  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00000f00  08000180  08000180  00008180  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000014  20000000  08001080  00010000  2**0  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000005c  20000014  08001094  00010014  2**2  ALLOC
  5 ._check_stack 00000100  20000070  080010f0  00010014  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  00010014  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000033  00000000  00000000  00010084  2**0  CONTENTS, READONLY
  8 .debug_aranges 00000450  00000000  00000000  000100b7  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000032cb  00000000  00000000  00010507  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e1e  00000000  00000000  000137d2  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000011e5  00000000  00000000  000145f0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000844  00000000  00000000  000157d8  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000133f  00000000  00000000  0001601c  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015a1  00000000  00000000  0001735b  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003d8  00000000  00000000  000188fc  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000178 l    d  ._inits	00000000 ._inits
08000180 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000014 l    d  .bss	00000000 .bss
20000070 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 vectors_stm32f10x.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
20000014 l     O .bss	00000004 uwTimingDelay
00000000 l    df *ABS*	00000000 stm32f10x_dma.c
00000000 l    df *ABS*	00000000 stm32f10x_gpio.c
00000000 l    df *ABS*	00000000 stm32f10x_rcc.c
20000000 l     O .data	00000004 ADCPrescTable
20000004 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f10x_usart.c
00000000 l    df *ABS*	00000000 startup_stm32f10x.c
00000000 l    df *ABS*	00000000 system_stm32f10x.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 
20004c00 l       *ABS*	00000000 _Heap_Limit
00000400 l       *ABS*	00000000 _Main_Stack_Size
08001080 l       .text	00000000 __exidx_end
20000070 l       ._check_stack	00000000 _Heap_Begin
08001080 l       .data	00000000 _etext
20004c00 l       *ABS*	00000000 __Main_Stack_Limit
0800017c l       ._inits	00000000 __fini_array_end
08001080 l       .text	00000000 __exidx_start
00000400 l       *ABS*	00000000 __Main_Stack_Size
00000100 l       *ABS*	00000000 _Minimum_Stack_Size
20000070 l       ._check_stack	00000000 _end_noinit
0800017c l       ._inits	00000000 __fini_array_start
0800017c l       ._inits	00000000 __init_array_end
0800017c l       ._inits	00000000 __preinit_array_end
20005000 l       *ABS*	00000000 __stack
0800017c l       ._inits	00000000 __init_array_start
08000178 l       ._inits	00000000 __preinit_array_start
08000164  w    F .isr_vector	00000002 RTC_Alarm_IRQHandler
08000164  w    F .isr_vector	00000002 EXTI2_IRQHandler
08000164  w    F .isr_vector	00000002 TIM8_TRG_COM_IRQHandler
08000164  w    F .isr_vector	00000002 TIM8_CC_IRQHandler
08000172  w    F .isr_vector	00000002 DebugMon_Handler
080003e8 g     F .text	00000016 DMA_Cmd
08000178 g     O ._inits	00000004 p_system_init
20000000 g       .data	00000000 __data_start__
08000bb0 g     F .text	0000005a .hidden __floatdidf
2000001c g     O .bss	0000002c dma
08000164  w    F .isr_vector	00000002 TIM1_CC_IRQHandler
08000168  w    F .isr_vector	00000002 HardFault_Handler
08000164  w    F .isr_vector	00000002 TIM6_IRQHandler
08000398 g     F .text	00000014 SysTick_Handler
08000164  w    F .isr_vector	00000002 PVD_IRQHandler
08000164  w    F .isr_vector	00000002 SDIO_IRQHandler
08001080 g       .data	00000000 _sidata
08000174  w    F .isr_vector	00000002 PendSV_Handler
08000166  w    F .isr_vector	00000002 NMI_Handler
0800010c g     F .isr_vector	00000028 system_init
08000164  w    F .isr_vector	00000002 CAN2_RX1_IRQHandler
08000164  w    F .isr_vector	00000002 EXTI3_IRQHandler
08000164  w    F .isr_vector	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08000164  w    F .isr_vector	00000002 TIM1_UP_TIM10_IRQHandler
20000014 g       .bss	00000000 _sbss
080003ac g     F .text	0000003c DMA_Init
08000164  w    F .isr_vector	00000002 TIM8_UP_TIM13_IRQHandler
08000b40 g     F .text	00000022 .hidden __floatsidf
08000164  w    F .isr_vector	00000002 EXTI0_IRQHandler
08000164  w    F .isr_vector	00000002 I2C2_EV_IRQHandler
20000070 g       ._check_stack	00000000 _noinit
08000164  w    F .isr_vector	00000002 CAN1_RX0_IRQHandler
08000164  w    F .isr_vector	00000002 TIM1_UP_TIM16_IRQHandler
0800016e  w    F .isr_vector	00000002 UsageFault_Handler
0800056c g     F .text	00000018 RCC_APB2PeriphClockCmd
08000164  w    F .isr_vector	00000002 CAN2_SCE_IRQHandler
08000164  w    F .isr_vector	00000002 ADC1_2_IRQHandler
08000430 g     F .text	0000009c GPIO_Init
20000014 g       .bss	00000000 __bss_start__
08000b20 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
08000164  w    F .isr_vector	00000002 SPI1_IRQHandler
080006f4 g     F .text	00000018 USART_Cmd
0800089c g     F .text	00000000 .hidden __aeabi_drsub
08000164  w    F .isr_vector	00000002 TAMPER_IRQHandler
08000164  w    F .isr_vector	00000002 TIM6_DAC_IRQHandler
20000048 g     O .bss	00000003 k
08000164  w    F .isr_vector	00000002 TIM1_BRK_TIM9_IRQHandler
08000164  w    F .isr_vector	00000002 CAN2_RX0_IRQHandler
08000b64 g     F .text	0000003a .hidden __extendsfdf2
08000164  w    F .isr_vector	00000002 TIM8_UP_IRQHandler
08000e60 g     F .text	000001d0 .hidden __aeabi_ddiv
080008a8 g     F .text	00000276 .hidden __adddf3
08000c0c g     F .text	00000254 .hidden __aeabi_dmul
08000720 g     F .text	00000048 __libc_init_array
08000164  w    F .isr_vector	00000002 DMA2_Channel2_IRQHandler
08000554 g     F .text	00000018 RCC_AHBPeriphClockCmd
08000164  w    F .isr_vector	00000002 DMA1_Channel4_IRQHandler
08000b20 g     F .text	0000001e .hidden __floatunsidf
2000004c g     O .bss	00000004 steps
08000400 g     F .text	0000001c DMA_GetFlagStatus
08000164  w    F .isr_vector	00000002 USART3_IRQHandler
08000768 g     F .text	00000024 __libc_fini_array
08000164  w    F .isr_vector	00000002 RTC_IRQHandler
20000070 g       .bss	00000000 _ebss
08000164  w    F .isr_vector	00000002 DMA1_Channel7_IRQHandler
08000134  w    F .isr_vector	00000030 Reset_Handler
08000164  w    F .isr_vector	00000002 CAN1_RX1_IRQHandler
08001030 g     F .text	0000004e .hidden __fixdfsi
08000164  w    F .isr_vector	00000002 UART5_IRQHandler
08000164  w    F .isr_vector	00000002 ADC3_IRQHandler
20000050 g     O .bss	00000010 usart
08000164  w    F .isr_vector	00000002 TIM4_IRQHandler
080008a8 g     F .text	00000276 .hidden __aeabi_dadd
08000164  w    F .isr_vector	00000002 DMA2_Channel1_IRQHandler
08000ba0 g     F .text	0000006a .hidden __aeabi_ul2d
08000164  w    F .isr_vector	00000002 I2C1_EV_IRQHandler
20000014 g       .data	00000000 __data_end__
20000060 g     O .bss	00000004 i
080004cc g     F .text	00000088 RCC_GetClocksFreq
08000164  w    F .isr_vector	00000002 DMA1_Channel6_IRQHandler
08000164  w    F .isr_vector	00000002 UART4_IRQHandler
08000164  w    F .isr_vector	00000002 DMA2_Channel4_IRQHandler
0800064c g     F .text	000000a8 USART_Init
20000070 g       .bss	00000000 __bss_end__
08000164  w    F .isr_vector	00000002 TIM3_IRQHandler
08000164  w    F .isr_vector	00000002 RCC_IRQHandler
08000164  w    F .isr_vector	00000002 TIM8_BRK_TIM12_IRQHandler
08000164  w    F .isr_vector	00000002 TIM1_TRG_COM_IRQHandler
08000164  w    F .isr_vector	00000002 DMA1_Channel1_IRQHandler
080008a4 g     F .text	0000027a .hidden __aeabi_dsub
08000164  w    F .isr_vector	00000002 Default_Handler
08000ba0 g     F .text	0000006a .hidden __floatundidf
08000218 g     F .text	00000044 set_bits
08000164  w    F .isr_vector	00000002 CEC_IRQHandler
08000164  w    F .isr_vector	00000002 EXTI15_10_IRQHandler
20000018 g     O .bss	00000004 buffer
08000164  w    F .isr_vector	00000002 TIM14_IRQHandler
08000164  w    F .isr_vector	00000002 TIM13_IRQHandler
08000164  w    F .isr_vector	00000002 TIM12_IRQHandler
08000164  w    F .isr_vector	00000002 TIM7_IRQHandler
08000164  w    F .isr_vector	00000002 CAN2_TX_IRQHandler
08000b40 g     F .text	00000022 .hidden __aeabi_i2d
08000164  w    F .isr_vector	00000002 TIM5_IRQHandler
08000164  w    F .isr_vector	00000002 EXTI9_5_IRQHandler
08000e60 g     F .text	000001d0 .hidden __divdf3
08000c0c g     F .text	00000254 .hidden __muldf3
08000164  w    F .isr_vector	00000002 ETH_WKUP_IRQHandler
080005b4 g     F .text	00000098 USART_DeInit
08000164  w    F .isr_vector	00000002 SPI2_IRQHandler
0800016a  w    F .isr_vector	00000002 MemManage_Handler
08000260 g     F .text	00000134 main
08000164  w    F .isr_vector	00000002 CAN1_TX_IRQHandler
08000170  w    F .isr_vector	00000002 SVC_Handler
08000164  w    F .isr_vector	00000002 DMA2_Channel5_IRQHandler
08000bb0 g     F .text	0000005a .hidden __aeabi_l2d
08000164  w    F .isr_vector	00000002 DMA1_Channel5_IRQHandler
08000164  w    F .isr_vector	00000002 EXTI4_IRQHandler
08000164  w    F .isr_vector	00000002 USB_LP_CAN1_RX0_IRQHandler
080007a8 g     F .text	000000f4 SystemInit
20000064 g     O .bss	00000004 count
08000164  w    F .isr_vector	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000164  w    F .isr_vector	00000002 USB_HP_CAN1_TX_IRQHandler
08000164  w    F .isr_vector	00000002 DMA1_Channel3_IRQHandler
08000164  w    F .isr_vector	00000002 FSMC_IRQHandler
08000164  w    F .isr_vector	00000002 ETH_IRQHandler
08000164  w    F .isr_vector	00000002 TIM1_UP_IRQHandler
08000164  w    F .isr_vector	00000002 WWDG_IRQHandler
0800059c g     F .text	00000018 RCC_APB1PeriphResetCmd
08000164  w    F .isr_vector	00000002 TIM2_IRQHandler
08000164  w    F .isr_vector	00000002 OTG_FS_WKUP_IRQHandler
08000164  w    F .isr_vector	00000002 TIM1_TRG_COM_TIM11_IRQHandler
08000164  w    F .isr_vector	00000002 TIM1_BRK_IRQHandler
20005000 g       *ABS*	00000000 _estack
08000164  w    F .isr_vector	00000002 EXTI1_IRQHandler
20000068 g     O .bss	00000004 gpio
20000014 g       .data	00000000 _edata
08000180 g     F .text	00000098 rec_data
08000164  w    F .isr_vector	00000002 DMA2_Channel4_5_IRQHandler
08000164  w    F .isr_vector	00000002 USART2_IRQHandler
2000006c g     O .bss	00000001 a
08000000 g     O .isr_vector	0000010c g_pfnVectors
08001030 g     F .text	0000004e .hidden __aeabi_d2iz
08000164  w    F .isr_vector	00000002 I2C2_ER_IRQHandler
08000164  w    F .isr_vector	00000002 DMA1_Channel2_IRQHandler
08000164  w    F .isr_vector	00000002 TIM8_BRK_IRQHandler
0800041c g     F .text	00000014 DMA_ClearFlag
08000164  w    F .isr_vector	00000002 CAN1_SCE_IRQHandler
08000164  w    F .isr_vector	00000002 FLASH_IRQHandler
0800078c  w    F .text	0000001c _exit
0800016c  w    F .isr_vector	00000002 BusFault_Handler
08000164  w    F .isr_vector	00000002 USART1_IRQHandler
08000164  w    F .isr_vector	00000002 OTG_FS_IRQHandler
08000164  w    F .isr_vector	00000002 SPI3_IRQHandler
08000584 g     F .text	00000018 RCC_APB2PeriphResetCmd
08000164  w    F .isr_vector	00000002 I2C1_ER_IRQHandler
08000b64 g     F .text	0000003a .hidden __aeabi_f2d
080008a4 g     F .text	0000027a .hidden __subdf3
0800070c g     F .text	00000012 USART_DMACmd
08000164  w    F .isr_vector	00000002 USBWakeUp_IRQHandler
08000164  w    F .isr_vector	00000002 DMA2_Channel3_IRQHandler
08000164  w    F .isr_vector	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
$d():
 8000000:	00 50 00 20 35 01 00 08 67 01 00 08 69 01 00 08     .P. 5...g...i...
 8000010:	6b 01 00 08 6d 01 00 08 6f 01 00 08 00 00 00 00     k...m...o.......
	...
 800002c:	71 01 00 08 73 01 00 08 00 00 00 00 75 01 00 08     q...s.......u...
 800003c:	99 03 00 08 65 01 00 08 65 01 00 08 65 01 00 08     ....e...e...e...
 800004c:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 800005c:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 800006c:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 800007c:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 800008c:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 800009c:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 80000ac:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 80000bc:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 80000cc:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
 80000dc:	65 01 00 08 65 01 00 08 65 01 00 08 65 01 00 08     e...e...e...e...
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <system_init>:
system_init():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 800010c:	2300      	movs	r3, #0
 800010e:	4a06      	ldr	r2, [pc, #24]	; (8000128 <system_init+0x1c>)
data_init():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000110:	4906      	ldr	r1, [pc, #24]	; (800012c <system_init+0x20>)
 8000112:	1898      	adds	r0, r3, r2
 8000114:	4288      	cmp	r0, r1
 8000116:	d204      	bcs.n	8000122 <system_init+0x16>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:107
    *p++ = *from++;
 8000118:	4905      	ldr	r1, [pc, #20]	; (8000130 <system_init+0x24>)
 800011a:	5859      	ldr	r1, [r3, r1]
 800011c:	5099      	str	r1, [r3, r2]
 800011e:	3304      	adds	r3, #4
 8000120:	e7f5      	b.n	800010e <system_init+0x2>
system_init():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 8000122:	f000 bb41 	b.w	80007a8 <SystemInit>
 8000126:	bf00      	nop
 8000128:	20000000 	.word	0x20000000
 800012c:	20000014 	.word	0x20000014
 8000130:	08001080 	.word	0x08001080

08000134 <Reset_Handler>:
Reset_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000134:	b510      	push	{r4, lr}
bss_init():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 8000136:	4b09      	ldr	r3, [pc, #36]	; (800015c <Reset_Handler+0x28>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:119
  while (p < section_end)
 8000138:	4a09      	ldr	r2, [pc, #36]	; (8000160 <Reset_Handler+0x2c>)
 800013a:	4293      	cmp	r3, r2
 800013c:	d203      	bcs.n	8000146 <Reset_Handler+0x12>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:120
    *p++ = 0;
 800013e:	2200      	movs	r2, #0
 8000140:	f843 2b04 	str.w	r2, [r3], #4
 8000144:	e7f8      	b.n	8000138 <Reset_Handler+0x4>
Reset_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 8000146:	f000 faeb 	bl	8000720 <__libc_init_array>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 800014a:	f000 f889 	bl	8000260 <main>
 800014e:	4604      	mov	r4, r0
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 8000150:	f000 fb0a 	bl	8000768 <__libc_fini_array>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 8000154:	4620      	mov	r0, r4
 8000156:	f000 fb19 	bl	800078c <_exit>
 800015a:	bf00      	nop
 800015c:	20000014 	.word	0x20000014
 8000160:	20000070 	.word	0x20000070

08000164 <ADC1_2_IRQHandler>:
Default_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:934
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 8000164:	e7fe      	b.n	8000164 <ADC1_2_IRQHandler>

08000166 <NMI_Handler>:
NMI_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:946
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000166:	e7fe      	b.n	8000166 <NMI_Handler>

08000168 <HardFault_Handler>:
HardFault_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:954
    }
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 8000168:	e7fe      	b.n	8000168 <HardFault_Handler>

0800016a <MemManage_Handler>:
MemManage_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:962
    }
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 800016a:	e7fe      	b.n	800016a <MemManage_Handler>

0800016c <BusFault_Handler>:
BusFault_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:970
    }
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 800016c:	e7fe      	b.n	800016c <BusFault_Handler>

0800016e <UsageFault_Handler>:
UsageFault_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:978
    }
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 800016e:	e7fe      	b.n	800016e <UsageFault_Handler>

08000170 <SVC_Handler>:
SVC_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:986
    }
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000170:	e7fe      	b.n	8000170 <SVC_Handler>

08000172 <DebugMon_Handler>:
DebugMon_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:994
    }
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 8000172:	e7fe      	b.n	8000172 <DebugMon_Handler>

08000174 <PendSV_Handler>:
PendSV_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:1002
    }
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000174:	e7fe      	b.n	8000174 <PendSV_Handler>
SysTick_Handler():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/vectors_stm32f10x.c:1010
    }
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 8000176:	e7fe      	b.n	8000176 <PendSV_Handler+0x2>

Disassembly of section .text:

08000180 <rec_data>:
rec_data():
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:139

}

//subroutine to get the recieved data

int rec_data(){
 8000180:	b538      	push	{r3, r4, r5, lr}
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:140
	USART_DMACmd(USART1,USART_DMAReq_Rx,ENABLE);
 8000182:	2201      	movs	r2, #1
 8000184:	481f      	ldr	r0, [pc, #124]	; (8000204 <rec_data+0x84>)
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	f000 fac0 	bl	800070c <USART_DMACmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:141
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 800018c:	2001      	movs	r0, #1
 800018e:	4601      	mov	r1, r0
 8000190:	f000 f9e0 	bl	8000554 <RCC_AHBPeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:142
	dma.DMA_PeripheralBaseAddr=(&(USART1->DR));
 8000194:	4b1c      	ldr	r3, [pc, #112]	; (8000208 <rec_data+0x88>)
 8000196:	4a1d      	ldr	r2, [pc, #116]	; (800020c <rec_data+0x8c>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:153
	dma.DMA_M2M=DMA_M2M_Disable;
	//enabling circular buffer, as it it meant for continuous data flow
	dma.DMA_Mode=DMA_Mode_Normal;
	//I dont know what this means lol, can be the iterations for the buffer
	dma.DMA_BufferSize=1;
	dma.DMA_Priority=DMA_Priority_VeryHigh;
 8000198:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800019c:	6259      	str	r1, [r3, #36]	; 0x24
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:156
	//recieving the data in memory location pointing to the buffer.
	//buffer=recieved data
	dma.DMA_MemoryBaseAddr=&buffer;
 800019e:	4c1c      	ldr	r4, [pc, #112]	; (8000210 <rec_data+0x90>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:157
	dma.DMA_MemoryInc=DMA_MemoryInc_Enable;
 80001a0:	2180      	movs	r1, #128	; 0x80
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:142
//subroutine to get the recieved data

int rec_data(){
	USART_DMACmd(USART1,USART_DMAReq_Rx,ENABLE);
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
	dma.DMA_PeripheralBaseAddr=(&(USART1->DR));
 80001a2:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:152
	//we are doing periph->DMA data block transfer, so disabling M2M
	dma.DMA_M2M=DMA_M2M_Disable;
	//enabling circular buffer, as it it meant for continuous data flow
	dma.DMA_Mode=DMA_Mode_Normal;
	//I dont know what this means lol, can be the iterations for the buffer
	dma.DMA_BufferSize=1;
 80001a4:	2501      	movs	r5, #1
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:143

int rec_data(){
	USART_DMACmd(USART1,USART_DMAReq_Rx,ENABLE);
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
	dma.DMA_PeripheralBaseAddr=(&(USART1->DR));
	dma.DMA_PeripheralInc=DMA_PeripheralInc_Disable;
 80001a6:	2200      	movs	r2, #0
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:157
	dma.DMA_BufferSize=1;
	dma.DMA_Priority=DMA_Priority_VeryHigh;
	//recieving the data in memory location pointing to the buffer.
	//buffer=recieved data
	dma.DMA_MemoryBaseAddr=&buffer;
	dma.DMA_MemoryInc=DMA_MemoryInc_Enable;
 80001a8:	6159      	str	r1, [r3, #20]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:160
	//the peripheral is the source of the data block transfer
	dma.DMA_DIR=DMA_DIR_PeripheralSRC;
	DMA_Init(DMA1_Channel5, &dma);
 80001aa:	481a      	ldr	r0, [pc, #104]	; (8000214 <rec_data+0x94>)
 80001ac:	4619      	mov	r1, r3
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:143

int rec_data(){
	USART_DMACmd(USART1,USART_DMAReq_Rx,ENABLE);
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
	dma.DMA_PeripheralBaseAddr=(&(USART1->DR));
	dma.DMA_PeripheralInc=DMA_PeripheralInc_Disable;
 80001ae:	611a      	str	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:145
	//essentially, the USART uses 8 bit serial transfer
	dma.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte;
 80001b0:	619a      	str	r2, [r3, #24]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:146
	dma.DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;
 80001b2:	61da      	str	r2, [r3, #28]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:148
	//we are doing periph->DMA data block transfer, so disabling M2M
	dma.DMA_M2M=DMA_M2M_Disable;
 80001b4:	629a      	str	r2, [r3, #40]	; 0x28
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:150
	//enabling circular buffer, as it it meant for continuous data flow
	dma.DMA_Mode=DMA_Mode_Normal;
 80001b6:	621a      	str	r2, [r3, #32]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:152
	//I dont know what this means lol, can be the iterations for the buffer
	dma.DMA_BufferSize=1;
 80001b8:	60dd      	str	r5, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:156
	dma.DMA_Priority=DMA_Priority_VeryHigh;
	//recieving the data in memory location pointing to the buffer.
	//buffer=recieved data
	dma.DMA_MemoryBaseAddr=&buffer;
 80001ba:	605c      	str	r4, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:159
	dma.DMA_MemoryInc=DMA_MemoryInc_Enable;
	//the peripheral is the source of the data block transfer
	dma.DMA_DIR=DMA_DIR_PeripheralSRC;
 80001bc:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:160
	DMA_Init(DMA1_Channel5, &dma);
 80001be:	f000 f8f5 	bl	80003ac <DMA_Init>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:164
	/*now that all the properties are assigned and the DMA1 channel5 assigned,
	we now start the DMA transfer and wait for the DMA flag to reset.
	*/
	DMA_Cmd(DMA1_Channel5,ENABLE);
 80001c2:	4814      	ldr	r0, [pc, #80]	; (8000214 <rec_data+0x94>)
 80001c4:	4629      	mov	r1, r5
 80001c6:	f000 f90f 	bl	80003e8 <DMA_Cmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:167 (discriminator 1)
	 /*enabling the Rx request for DMA*/
	//since the DMA's is now enabled, we poll the transfer complete bit
	while((DMA_GetFlagStatus(DMA1_FLAG_TC5)==RESET));
 80001ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001ce:	f000 f917 	bl	8000400 <DMA_GetFlagStatus>
 80001d2:	2800      	cmp	r0, #0
 80001d4:	d0f9      	beq.n	80001ca <rec_data+0x4a>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:169
	//disable the DMA
	DMA_ClearFlag(DMA1_FLAG_TC5);
 80001d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001da:	f000 f91f 	bl	800041c <DMA_ClearFlag>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:170
	DMA_Cmd(DMA1_Channel5,DISABLE);
 80001de:	480d      	ldr	r0, [pc, #52]	; (8000214 <rec_data+0x94>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	f000 f901 	bl	80003e8 <DMA_Cmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:172
	//disabling the UART also
	USART_DMACmd(USART1,USART_DMAReq_Rx,DISABLE);
 80001e6:	2200      	movs	r2, #0
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <rec_data+0x84>)
 80001ea:	2140      	movs	r1, #64	; 0x40
 80001ec:	f000 fa8e 	bl	800070c <USART_DMACmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:173
	USART_Cmd(USART1,DISABLE);
 80001f0:	2100      	movs	r1, #0
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <rec_data+0x84>)
 80001f4:	f000 fa7e 	bl	80006f4 <USART_Cmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:174
	USART_DeInit(USART1);
 80001f8:	4802      	ldr	r0, [pc, #8]	; (8000204 <rec_data+0x84>)
 80001fa:	f000 f9db 	bl	80005b4 <USART_DeInit>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:176
	return buffer;
}
 80001fe:	6820      	ldr	r0, [r4, #0]
 8000200:	bd38      	pop	{r3, r4, r5, pc}
 8000202:	bf00      	nop
 8000204:	40013800 	.word	0x40013800
 8000208:	2000001c 	.word	0x2000001c
 800020c:	40013804 	.word	0x40013804
 8000210:	20000018 	.word	0x20000018
 8000214:	40020058 	.word	0x40020058

08000218 <set_bits>:
set_bits():
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:180


void set_bits()
{
 8000218:	b507      	push	{r0, r1, r2, lr}
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:182
	GPIO_InitTypeDef gpio;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 800021a:	2008      	movs	r0, #8
 800021c:	2101      	movs	r1, #1
 800021e:	f000 f9a5 	bl	800056c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:183
	gpio.GPIO_Pin=GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 ;
 8000222:	2338      	movs	r3, #56	; 0x38
 8000224:	f8ad 3004 	strh.w	r3, [sp, #4]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:184
	gpio.GPIO_Mode=GPIO_Mode_Out_PP;
 8000228:	2310      	movs	r3, #16
 800022a:	f88d 3007 	strb.w	r3, [sp, #7]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:186
	gpio.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &gpio);
 800022e:	a901      	add	r1, sp, #4
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:185
{
	GPIO_InitTypeDef gpio;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
	gpio.GPIO_Pin=GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 ;
	gpio.GPIO_Mode=GPIO_Mode_Out_PP;
	gpio.GPIO_Speed=GPIO_Speed_50MHz;
 8000230:	2303      	movs	r3, #3
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:186
	GPIO_Init(GPIOC, &gpio);
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <set_bits+0x38>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:185
{
	GPIO_InitTypeDef gpio;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
	gpio.GPIO_Pin=GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 ;
	gpio.GPIO_Mode=GPIO_Mode_Out_PP;
	gpio.GPIO_Speed=GPIO_Speed_50MHz;
 8000234:	f88d 3006 	strb.w	r3, [sp, #6]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:186
	GPIO_Init(GPIOC, &gpio);
 8000238:	f000 f8fa 	bl	8000430 <GPIO_Init>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:187
	GPIOB->ODR|=a;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <set_bits+0x3c>)
 800023e:	4906      	ldr	r1, [pc, #24]	; (8000258 <set_bits+0x40>)
 8000240:	68da      	ldr	r2, [r3, #12]
 8000242:	7809      	ldrb	r1, [r1, #0]
 8000244:	430a      	orrs	r2, r1
 8000246:	60da      	str	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:189

}
 8000248:	b003      	add	sp, #12
 800024a:	f85d fb04 	ldr.w	pc, [sp], #4
 800024e:	bf00      	nop
 8000250:	40011000 	.word	0x40011000
 8000254:	40010c00 	.word	0x40010c00
 8000258:	2000006c 	.word	0x2000006c
$d():
 800025c:	00000000 	.word	0x00000000

08000260 <main>:
main():
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:44
char k[3];
uint8_t a;
uint32_t  buffer = 0x0000;
// ----------------------------------------------------------------------------
int main ()
{ /*
 8000260:	b570      	push	{r4, r5, r6, lr}
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:51
	gpio.GPIO_Pin=(1<<MS1 | 1<<MS2 | 1<<MS3 | 1<<DIR);
	gpio.GPIO_Mode=GPIO_Mode_Out_PP;
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
	//sTince gpio is a struct, it is passed by reference.
	GPIO_Init(GPIOA, &gpio); */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8000262:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000266:	2101      	movs	r1, #1
 8000268:	f000 f980 	bl	800056c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:52
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
 800026c:	2004      	movs	r0, #4
 800026e:	2101      	movs	r1, #1
 8000270:	f000 f97c 	bl	800056c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:53
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
 8000274:	2001      	movs	r0, #1
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:55
	//setting USART Tx and Rx pins
	gpio.GPIO_Pin=(USART_TX);
 8000276:	4c3e      	ldr	r4, [pc, #248]	; (8000370 <main+0x110>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:53
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
	//sTince gpio is a struct, it is passed by reference.
	GPIO_Init(GPIOA, &gpio); */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
 8000278:	4601      	mov	r1, r0
 800027a:	f000 f977 	bl	800056c <RCC_APB2PeriphClockCmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:55
	//setting USART Tx and Rx pins
	gpio.GPIO_Pin=(USART_TX);
 800027e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000282:	8023      	strh	r3, [r4, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:58
	gpio.GPIO_Mode=GPIO_Mode_AF_PP;
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
	GPIO_Init(GPIOA, &gpio);
 8000284:	4621      	mov	r1, r4
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:56
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
	//setting USART Tx and Rx pins
	gpio.GPIO_Pin=(USART_TX);
	gpio.GPIO_Mode=GPIO_Mode_AF_PP;
 8000286:	2318      	movs	r3, #24
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:57
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
 8000288:	2501      	movs	r5, #1
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:58
	GPIO_Init(GPIOA, &gpio);
 800028a:	483a      	ldr	r0, [pc, #232]	; (8000374 <main+0x114>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:56
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
	//setting USART Tx and Rx pins
	gpio.GPIO_Pin=(USART_TX);
	gpio.GPIO_Mode=GPIO_Mode_AF_PP;
 800028c:	70e3      	strb	r3, [r4, #3]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:57
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
 800028e:	70a5      	strb	r5, [r4, #2]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:58
	GPIO_Init(GPIOA, &gpio);
 8000290:	f000 f8ce 	bl	8000430 <GPIO_Init>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:60

	gpio.GPIO_Pin=USART_RX;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	8023      	strh	r3, [r4, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:62
	gpio.GPIO_Mode=GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &gpio);
 800029a:	4621      	mov	r1, r4
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:61
	gpio.GPIO_Mode=GPIO_Mode_AF_PP;
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
	GPIO_Init(GPIOA, &gpio);

	gpio.GPIO_Pin=USART_RX;
	gpio.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 800029c:	2304      	movs	r3, #4
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:62
	GPIO_Init(GPIOA, &gpio);
 800029e:	4835      	ldr	r0, [pc, #212]	; (8000374 <main+0x114>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:61
	gpio.GPIO_Mode=GPIO_Mode_AF_PP;
	gpio.GPIO_Speed=GPIO_Speed_10MHz;
	GPIO_Init(GPIOA, &gpio);

	gpio.GPIO_Pin=USART_RX;
	gpio.GPIO_Mode=GPIO_Mode_IN_FLOATING;
 80002a0:	70e3      	strb	r3, [r4, #3]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:62
	GPIO_Init(GPIOA, &gpio);
 80002a2:	f000 f8c5 	bl	8000430 <GPIO_Init>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:67
	//now the question is that do i intialize the USART individually or should I
	//do that via a DMA- the answer is that USART is my peripeheral and DMA is the mode
	//through which i want to access my data blocks
	//instead of getting an integer value from DMA array
	usart.USART_Mode=USART_Mode_Rx | USART_Mode_Tx ;
 80002a6:	4934      	ldr	r1, [pc, #208]	; (8000378 <main+0x118>)
 80002a8:	220c      	movs	r2, #12
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:69
	usart.USART_BaudRate=9600;
	usart.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 80002aa:	2400      	movs	r4, #0
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:67
	GPIO_Init(GPIOA, &gpio);
	//now the question is that do i intialize the USART individually or should I
	//do that via a DMA- the answer is that USART is my peripeheral and DMA is the mode
	//through which i want to access my data blocks
	//instead of getting an integer value from DMA array
	usart.USART_Mode=USART_Mode_Rx | USART_Mode_Tx ;
 80002ac:	814a      	strh	r2, [r1, #10]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:73
	usart.USART_BaudRate=9600;
	usart.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
	usart.USART_StopBits=USART_StopBits_1;
	usart.USART_Parity=USART_Parity_No;
	usart.USART_WordLength=USART_WordLength_8b;
	USART_Init(USART1, &usart);
 80002ae:	4833      	ldr	r0, [pc, #204]	; (800037c <main+0x11c>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:68
	//now the question is that do i intialize the USART individually or should I
	//do that via a DMA- the answer is that USART is my peripeheral and DMA is the mode
	//through which i want to access my data blocks
	//instead of getting an integer value from DMA array
	usart.USART_Mode=USART_Mode_Rx | USART_Mode_Tx ;
	usart.USART_BaudRate=9600;
 80002b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002b4:	600a      	str	r2, [r1, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:69
	usart.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
 80002b6:	818c      	strh	r4, [r1, #12]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:70
	usart.USART_StopBits=USART_StopBits_1;
 80002b8:	80cc      	strh	r4, [r1, #6]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:71
	usart.USART_Parity=USART_Parity_No;
 80002ba:	810c      	strh	r4, [r1, #8]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:72
	usart.USART_WordLength=USART_WordLength_8b;
 80002bc:	808c      	strh	r4, [r1, #4]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:73
	USART_Init(USART1, &usart);
 80002be:	f000 f9c5 	bl	800064c <USART_Init>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:74
	USART_Cmd(USART1,ENABLE);
 80002c2:	482e      	ldr	r0, [pc, #184]	; (800037c <main+0x11c>)
 80002c4:	4629      	mov	r1, r5
 80002c6:	f000 fa15 	bl	80006f4 <USART_Cmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:76
	//enabling the clock for DMA,
	rec_data();
 80002ca:	f7ff ff59 	bl	8000180 <rec_data>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:87
	//sending values using the pySerial library on python.
	/*
	 * The three inputs are mainly the distance to be travelled by the stepper's pulley,
	 * the step size of the stepper and direction
	 */
	for(i=0;i<3;i++){
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <main+0x120>)
 80002d0:	601c      	str	r4, [r3, #0]
 80002d2:	461e      	mov	r6, r3
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:87 (discriminator 1)
 80002d4:	6832      	ldr	r2, [r6, #0]
 80002d6:	4d2a      	ldr	r5, [pc, #168]	; (8000380 <main+0x120>)
 80002d8:	2a02      	cmp	r2, #2
 80002da:	4c2a      	ldr	r4, [pc, #168]	; (8000384 <main+0x124>)
 80002dc:	dc10      	bgt.n	8000300 <main+0xa0>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:88 (discriminator 2)
		USART_Init(USART1, &usart);
 80002de:	4827      	ldr	r0, [pc, #156]	; (800037c <main+0x11c>)
 80002e0:	4925      	ldr	r1, [pc, #148]	; (8000378 <main+0x118>)
 80002e2:	f000 f9b3 	bl	800064c <USART_Init>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:89 (discriminator 2)
		USART_Cmd(USART1,ENABLE);
 80002e6:	4825      	ldr	r0, [pc, #148]	; (800037c <main+0x11c>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	f000 fa03 	bl	80006f4 <USART_Cmd>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:90 (discriminator 2)
		rec_data();
 80002ee:	f7ff ff47 	bl	8000180 <rec_data>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:91 (discriminator 2)
		k[i]=buffer;
 80002f2:	4a25      	ldr	r2, [pc, #148]	; (8000388 <main+0x128>)
 80002f4:	682b      	ldr	r3, [r5, #0]
 80002f6:	6812      	ldr	r2, [r2, #0]
 80002f8:	54e2      	strb	r2, [r4, r3]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:87 (discriminator 2)
	//sending values using the pySerial library on python.
	/*
	 * The three inputs are mainly the distance to be travelled by the stepper's pulley,
	 * the step size of the stepper and direction
	 */
	for(i=0;i<3;i++){
 80002fa:	3301      	adds	r3, #1
 80002fc:	602b      	str	r3, [r5, #0]
 80002fe:	e7e9      	b.n	80002d4 <main+0x74>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:94
		USART_Cmd(USART1,ENABLE);
		rec_data();
		k[i]=buffer;
	}
	//putting a switch case to get the values
	switch(k[2]){
 8000300:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8000304:	3b31      	subs	r3, #49	; 0x31
 8000306:	2b07      	cmp	r3, #7
 8000308:	d82a      	bhi.n	8000360 <main+0x100>
 800030a:	e8df f003 	tbb	[pc, r3]
 800030e:	0a04      	.short	0x0a04
 8000310:	29291129 	.word	0x29291129
 8000314:	1829      	.short	0x1829
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:96
	case '1':
		a=0x0000;//this will be the for ms1, ms2, ms3=0;
 8000316:	4b1d      	ldr	r3, [pc, #116]	; (800038c <main+0x12c>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:98
		//now given the distance, what will be the number of steps to travel
		steps=k[1]/CIRCUM;
 800031c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8000320:	e013      	b.n	800034a <main+0xea>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:101
		break;
	case '2':
		a=0x0008;
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <main+0x12c>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:102
		steps=k[1]*2/CIRCUM;
 8000324:	f994 0001 	ldrsb.w	r0, [r4, #1]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:101
		a=0x0000;//this will be the for ms1, ms2, ms3=0;
		//now given the distance, what will be the number of steps to travel
		steps=k[1]/CIRCUM;
		break;
	case '2':
		a=0x0008;
 8000328:	2208      	movs	r2, #8
 800032a:	701a      	strb	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:102
		steps=k[1]*2/CIRCUM;
 800032c:	0040      	lsls	r0, r0, #1
 800032e:	e00c      	b.n	800034a <main+0xea>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:105
		break;
	case '4':
		a=0x0010;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <main+0x12c>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:106
		steps=k[1]*4/CIRCUM;
 8000332:	f994 0001 	ldrsb.w	r0, [r4, #1]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:105
	case '2':
		a=0x0008;
		steps=k[1]*2/CIRCUM;
		break;
	case '4':
		a=0x0010;
 8000336:	2210      	movs	r2, #16
 8000338:	701a      	strb	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:106
		steps=k[1]*4/CIRCUM;
 800033a:	0080      	lsls	r0, r0, #2
 800033c:	e005      	b.n	800034a <main+0xea>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:109
		break;
	case '8':
		a=0x0018;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <main+0x12c>)
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:110
		steps=k[1]*8/CIRCUM;
 8000340:	f994 0001 	ldrsb.w	r0, [r4, #1]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:109
	case '4':
		a=0x0010;
		steps=k[1]*4/CIRCUM;
		break;
	case '8':
		a=0x0018;
 8000344:	2218      	movs	r2, #24
 8000346:	701a      	strb	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:110
		steps=k[1]*8/CIRCUM;
 8000348:	00c0      	lsls	r0, r0, #3
 800034a:	f000 fbf9 	bl	8000b40 <__aeabi_i2d>
 800034e:	a306      	add	r3, pc, #24	; (adr r3, 8000368 <main+0x108>)
 8000350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000354:	f000 fd84 	bl	8000e60 <__aeabi_ddiv>
 8000358:	f000 fe6a 	bl	8001030 <__aeabi_d2iz>
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <main+0x130>)
 800035e:	6018      	str	r0, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:118
		a=0x0038;
		steps=k[1]*16/CIRCUM;
		break;
	}
//since a pulse has to be given for every step,
	set_bits();
 8000360:	f7ff ff5a 	bl	8000218 <set_bits>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:135
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
	}
	*/


}
 8000364:	2000      	movs	r0, #0
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	51eb851f 	.word	0x51eb851f
 800036c:	40191eb8 	.word	0x40191eb8
 8000370:	20000068 	.word	0x20000068
 8000374:	40010800 	.word	0x40010800
 8000378:	20000050 	.word	0x20000050
 800037c:	40013800 	.word	0x40013800
 8000380:	20000060 	.word	0x20000060
 8000384:	20000048 	.word	0x20000048
 8000388:	20000018 	.word	0x20000018
 800038c:	2000006c 	.word	0x2000006c
 8000390:	2000004c 	.word	0x2000004c
$t():
 8000394:	f3af 8000 	nop.w

08000398 <SysTick_Handler>:
TimingDelay_Decrement():
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:210
}

void
TimingDelay_Decrement(void)
{
  if (uwTimingDelay != 0x00)
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <SysTick_Handler+0x10>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	b112      	cbz	r2, 80003a4 <SysTick_Handler+0xc>
/home/kartik/workspaceSTM32/stepper/Release/../src/main.c:212
    {
      uwTimingDelay--;
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	3a01      	subs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000014 	.word	0x20000014

080003ac <DMA_Init>:
DMA_Init():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80003ac:	688a      	ldr	r2, [r1, #8]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:203
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80003ae:	b510      	push	{r4, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80003b0:	6a0c      	ldr	r4, [r1, #32]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:220
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80003b2:	6803      	ldr	r3, [r0, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80003b4:	4314      	orrs	r4, r2
 80003b6:	690a      	ldr	r2, [r1, #16]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:222

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80003b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80003bc:	4314      	orrs	r4, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:233
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80003be:	694a      	ldr	r2, [r1, #20]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:222

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80003c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:233
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80003c4:	4314      	orrs	r4, r2
 80003c6:	698a      	ldr	r2, [r1, #24]
 80003c8:	4314      	orrs	r4, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:234
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80003ca:	69ca      	ldr	r2, [r1, #28]
 80003cc:	4314      	orrs	r4, r2
 80003ce:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80003d0:	4314      	orrs	r4, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:235
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80003d2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80003d4:	4322      	orrs	r2, r4
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:232
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80003d6:	4313      	orrs	r3, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:238
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80003d8:	6003      	str	r3, [r0, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:242

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80003da:	68cb      	ldr	r3, [r1, #12]
 80003dc:	6043      	str	r3, [r0, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:246

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80003de:	680b      	ldr	r3, [r1, #0]
 80003e0:	6083      	str	r3, [r0, #8]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:250

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80003e2:	684b      	ldr	r3, [r1, #4]
 80003e4:	60c3      	str	r3, [r0, #12]
 80003e6:	bd10      	pop	{r4, pc}

080003e8 <DMA_Cmd>:
DMA_Cmd():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:300
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003e8:	b119      	cbz	r1, 80003f2 <DMA_Cmd+0xa>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:303
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80003ea:	6803      	ldr	r3, [r0, #0]
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	e003      	b.n	80003fa <DMA_Cmd+0x12>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:308
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80003f2:	6802      	ldr	r2, [r0, #0]
 80003f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80003f8:	4013      	ands	r3, r2
 80003fa:	6003      	str	r3, [r0, #0]
 80003fc:	4770      	bx	lr
	...

08000400 <DMA_GetFlagStatus>:
DMA_GetFlagStatus():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:442
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000400:	00c3      	lsls	r3, r0, #3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:445
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000402:	bf4c      	ite	mi
 8000404:	4b03      	ldrmi	r3, [pc, #12]	; (8000414 <DMA_GetFlagStatus+0x14>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:450
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000406:	4b04      	ldrpl	r3, [pc, #16]	; (8000418 <DMA_GetFlagStatus+0x18>)
 8000408:	681b      	ldr	r3, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:454
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 800040a:	4203      	tst	r3, r0
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:467
    bitstatus = RESET;
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
}
 800040c:	bf0c      	ite	eq
 800040e:	2000      	moveq	r0, #0
 8000410:	2001      	movne	r0, #1
 8000412:	4770      	bx	lr
 8000414:	40020400 	.word	0x40020400
 8000418:	40020000 	.word	0x40020000

0800041c <DMA_ClearFlag>:
DMA_ClearFlag():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:529
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800041c:	00c3      	lsls	r3, r0, #3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:532
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800041e:	bf4c      	ite	mi
 8000420:	4b01      	ldrmi	r3, [pc, #4]	; (8000428 <DMA_ClearFlag+0xc>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_dma.c:537
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000422:	4b02      	ldrpl	r3, [pc, #8]	; (800042c <DMA_ClearFlag+0x10>)
 8000424:	6058      	str	r0, [r3, #4]
 8000426:	4770      	bx	lr
 8000428:	40020400 	.word	0x40020400
 800042c:	40020000 	.word	0x40020000

08000430 <GPIO_Init>:
GPIO_Init():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:183
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000430:	78cb      	ldrb	r3, [r1, #3]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:174
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000432:	b5f0      	push	{r4, r5, r6, r7, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:184
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000434:	06da      	lsls	r2, r3, #27
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:189
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000436:	bf48      	it	mi
 8000438:	788a      	ldrbmi	r2, [r1, #2]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:193
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800043a:	8809      	ldrh	r1, [r1, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:183
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800043c:	f003 050f 	and.w	r5, r3, #15
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:189
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000440:	bf48      	it	mi
 8000442:	4315      	orrmi	r5, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:193
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000444:	f011 0fff 	tst.w	r1, #255	; 0xff
 8000448:	d01d      	beq.n	8000486 <GPIO_Init+0x56>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:195
  {
    tmpreg = GPIOx->CRL;
 800044a:	6804      	ldr	r4, [r0, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:196
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800044c:	2200      	movs	r2, #0
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:198
    {
      pos = ((uint32_t)0x01) << pinpos;
 800044e:	2701      	movs	r7, #1
 8000450:	4097      	lsls	r7, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:200
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000452:	ea07 0601 	and.w	r6, r7, r1
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:201
      if (currentpin == pos)
 8000456:	42be      	cmp	r6, r7
 8000458:	d111      	bne.n	800047e <GPIO_Init+0x4e>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:203
      {
        pos = pinpos << 2;
 800045a:	0097      	lsls	r7, r2, #2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:205
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800045c:	f04f 0c0f 	mov.w	ip, #15
 8000460:	fa0c fc07 	lsl.w	ip, ip, r7
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:208
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000464:	fa05 f707 	lsl.w	r7, r5, r7
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:206
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000468:	ea24 040c 	bic.w	r4, r4, ip
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:210
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800046c:	2b28      	cmp	r3, #40	; 0x28
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:208
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800046e:	ea44 0407 	orr.w	r4, r4, r7
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:210
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000472:	d101      	bne.n	8000478 <GPIO_Init+0x48>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:212
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000474:	6146      	str	r6, [r0, #20]
 8000476:	e002      	b.n	800047e <GPIO_Init+0x4e>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:217
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000478:	2b48      	cmp	r3, #72	; 0x48
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:219
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800047a:	bf08      	it	eq
 800047c:	6106      	streq	r6, [r0, #16]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:196
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800047e:	3201      	adds	r2, #1
 8000480:	2a08      	cmp	r2, #8
 8000482:	d1e4      	bne.n	800044e <GPIO_Init+0x1e>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:224
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000484:	6004      	str	r4, [r0, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:228
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000486:	29ff      	cmp	r1, #255	; 0xff
 8000488:	d91f      	bls.n	80004ca <GPIO_Init+0x9a>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:230
  {
    tmpreg = GPIOx->CRH;
 800048a:	6844      	ldr	r4, [r0, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:231
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800048c:	2200      	movs	r2, #0
 800048e:	f102 0608 	add.w	r6, r2, #8
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:233
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000492:	2701      	movs	r7, #1
 8000494:	40b7      	lsls	r7, r6
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:235
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000496:	ea07 0601 	and.w	r6, r7, r1
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:236
      if (currentpin == pos)
 800049a:	42be      	cmp	r6, r7
 800049c:	d111      	bne.n	80004c2 <GPIO_Init+0x92>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:238
      {
        pos = pinpos << 2;
 800049e:	0097      	lsls	r7, r2, #2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:240
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80004a0:	f04f 0c0f 	mov.w	ip, #15
 80004a4:	fa0c fc07 	lsl.w	ip, ip, r7
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:243
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80004a8:	fa05 f707 	lsl.w	r7, r5, r7
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:241
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80004ac:	ea24 040c 	bic.w	r4, r4, ip
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:245
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80004b0:	2b28      	cmp	r3, #40	; 0x28
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:243
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80004b2:	ea44 0407 	orr.w	r4, r4, r7
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:245
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80004b6:	d101      	bne.n	80004bc <GPIO_Init+0x8c>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:247
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004b8:	6146      	str	r6, [r0, #20]
 80004ba:	e002      	b.n	80004c2 <GPIO_Init+0x92>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:250
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004bc:	2b48      	cmp	r3, #72	; 0x48
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:252
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004be:	bf08      	it	eq
 80004c0:	6106      	streq	r6, [r0, #16]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:231
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004c2:	3201      	adds	r2, #1
 80004c4:	2a08      	cmp	r2, #8
 80004c6:	d1e2      	bne.n	800048e <GPIO_Init+0x5e>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_gpio.c:256
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80004c8:	6044      	str	r4, [r0, #4]
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004cc <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:921
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <RCC_GetClocksFreq+0x74>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:909
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004ce:	b510      	push	{r4, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:921
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	f002 020c 	and.w	r2, r2, #12
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:923
  
  switch (tmp)
 80004d6:	2a04      	cmp	r2, #4
 80004d8:	d001      	beq.n	80004de <RCC_GetClocksFreq+0x12>
 80004da:	2a08      	cmp	r2, #8
 80004dc:	d001      	beq.n	80004e2 <RCC_GetClocksFreq+0x16>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:929
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004de:	4a19      	ldr	r2, [pc, #100]	; (8000544 <RCC_GetClocksFreq+0x78>)
 80004e0:	e00e      	b.n	8000500 <RCC_GetClocksFreq+0x34>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:934
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80004e2:	685a      	ldr	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:935
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80004e4:	6859      	ldr	r1, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:938
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80004e6:	f3c2 4283 	ubfx	r2, r2, #18, #4
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:940
      
      if (pllsource == 0x00)
 80004ea:	03cc      	lsls	r4, r1, #15
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:938
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80004ec:	f102 0202 	add.w	r2, r2, #2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:940
      
      if (pllsource == 0x00)
 80004f0:	d502      	bpl.n	80004f8 <RCC_GetClocksFreq+0x2c>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:952
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80004f2:	6859      	ldr	r1, [r3, #4]
 80004f4:	0389      	lsls	r1, r1, #14
 80004f6:	d501      	bpl.n	80004fc <RCC_GetClocksFreq+0x30>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:954
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80004f8:	4913      	ldr	r1, [pc, #76]	; (8000548 <RCC_GetClocksFreq+0x7c>)
 80004fa:	e000      	b.n	80004fe <RCC_GetClocksFreq+0x32>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:958
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80004fc:	4911      	ldr	r1, [pc, #68]	; (8000544 <RCC_GetClocksFreq+0x78>)
 80004fe:	434a      	muls	r2, r1
 8000500:	6002      	str	r2, [r0, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1008
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000502:	685a      	ldr	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1010
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000504:	4911      	ldr	r1, [pc, #68]	; (800054c <RCC_GetClocksFreq+0x80>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1009
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8000506:	f3c2 1203 	ubfx	r2, r2, #4, #4
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1010
  presc = APBAHBPrescTable[tmp];
 800050a:	5c8c      	ldrb	r4, [r1, r2]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1012
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800050c:	6802      	ldr	r2, [r0, #0]
 800050e:	40e2      	lsrs	r2, r4
 8000510:	6042      	str	r2, [r0, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1014
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000512:	685c      	ldr	r4, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1015
  tmp = tmp >> 8;
 8000514:	f3c4 2402 	ubfx	r4, r4, #8, #3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1016
  presc = APBAHBPrescTable[tmp];
 8000518:	5d0c      	ldrb	r4, [r1, r4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1018
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800051a:	fa22 f404 	lsr.w	r4, r2, r4
 800051e:	6084      	str	r4, [r0, #8]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1020
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000520:	685c      	ldr	r4, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1021
  tmp = tmp >> 11;
 8000522:	f3c4 24c2 	ubfx	r4, r4, #11, #3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1022
  presc = APBAHBPrescTable[tmp];
 8000526:	5d09      	ldrb	r1, [r1, r4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1024
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000528:	40ca      	lsrs	r2, r1
 800052a:	60c2      	str	r2, [r0, #12]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1026
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800052c:	685b      	ldr	r3, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1028
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <RCC_GetClocksFreq+0x84>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1027
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
 8000530:	f3c3 3381 	ubfx	r3, r3, #14, #2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1028
  presc = ADCPrescTable[tmp];
 8000534:	5ccb      	ldrb	r3, [r1, r3]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1030
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000536:	fbb2 f2f3 	udiv	r2, r2, r3
 800053a:	6102      	str	r2, [r0, #16]
 800053c:	bd10      	pop	{r4, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000
 8000544:	007a1200 	.word	0x007a1200
 8000548:	003d0900 	.word	0x003d0900
 800054c:	20000004 	.word	0x20000004
 8000550:	20000000 	.word	0x20000000

08000554 <RCC_AHBPeriphClockCmd>:
RCC_AHBPeriphClockCmd():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1065
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <RCC_AHBPeriphClockCmd+0x14>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1072
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000556:	695a      	ldr	r2, [r3, #20]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1070
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000558:	b109      	cbz	r1, 800055e <RCC_AHBPeriphClockCmd+0xa>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1072
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800055a:	4310      	orrs	r0, r2
 800055c:	e001      	b.n	8000562 <RCC_AHBPeriphClockCmd+0xe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1076
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800055e:	ea22 0000 	bic.w	r0, r2, r0
 8000562:	6158      	str	r0, [r3, #20]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1096
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <RCC_APB2PeriphClockCmd+0x14>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1102
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800056e:	699a      	ldr	r2, [r3, #24]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1100
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000570:	b109      	cbz	r1, 8000576 <RCC_APB2PeriphClockCmd+0xa>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1102
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000572:	4310      	orrs	r0, r2
 8000574:	e001      	b.n	800057a <RCC_APB2PeriphClockCmd+0xe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1106
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000576:	ea22 0000 	bic.w	r0, r2, r0
 800057a:	6198      	str	r0, [r3, #24]
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <RCC_APB2PeriphResetCmd>:
RCC_APB2PeriphResetCmd():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1186
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <RCC_APB2PeriphResetCmd+0x14>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1192
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000586:	68da      	ldr	r2, [r3, #12]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1190
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000588:	b109      	cbz	r1, 800058e <RCC_APB2PeriphResetCmd+0xa>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1192
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800058a:	4310      	orrs	r0, r2
 800058c:	e001      	b.n	8000592 <RCC_APB2PeriphResetCmd+0xe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1196
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800058e:	ea22 0000 	bic.w	r0, r2, r0
 8000592:	60d8      	str	r0, [r3, #12]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <RCC_APB1PeriphResetCmd>:
RCC_APB1PeriphResetCmd():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1217
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <RCC_APB1PeriphResetCmd+0x14>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1223
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800059e:	691a      	ldr	r2, [r3, #16]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1221
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005a0:	b109      	cbz	r1, 80005a6 <RCC_APB1PeriphResetCmd+0xa>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1223
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80005a2:	4310      	orrs	r0, r2
 80005a4:	e001      	b.n	80005aa <RCC_APB1PeriphResetCmd+0xe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_rcc.c:1227
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80005a6:	ea22 0000 	bic.w	r0, r2, r0
 80005aa:	6118      	str	r0, [r3, #16]
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <USART_DeInit>:
USART_DeInit():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:131
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80005b4:	b508      	push	{r3, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:135
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <USART_DeInit+0x84>)
 80005b8:	4298      	cmp	r0, r3
 80005ba:	d10b      	bne.n	80005d4 <USART_DeInit+0x20>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:137
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80005bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005c0:	2101      	movs	r1, #1
 80005c2:	f7ff ffdf 	bl	8000584 <RCC_APB2PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:163
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 80005c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:138
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2100      	movs	r1, #0
 80005d0:	f7ff bfd8 	b.w	8000584 <RCC_APB2PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:140
  }
  else if (USARTx == USART2)
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <USART_DeInit+0x88>)
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d107      	bne.n	80005ea <USART_DeInit+0x36>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:142
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80005da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005de:	2101      	movs	r1, #1
 80005e0:	f7ff ffdc 	bl	800059c <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:143
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80005e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005e8:	e01f      	b.n	800062a <USART_DeInit+0x76>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:145
  }
  else if (USARTx == USART3)
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <USART_DeInit+0x8c>)
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d107      	bne.n	8000600 <USART_DeInit+0x4c>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:147
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80005f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005f4:	2101      	movs	r1, #1
 80005f6:	f7ff ffd1 	bl	800059c <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:148
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80005fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005fe:	e014      	b.n	800062a <USART_DeInit+0x76>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:150
  }    
  else if (USARTx == UART4)
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <USART_DeInit+0x90>)
 8000602:	4298      	cmp	r0, r3
 8000604:	d107      	bne.n	8000616 <USART_DeInit+0x62>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:152
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000606:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800060a:	2101      	movs	r1, #1
 800060c:	f7ff ffc6 	bl	800059c <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:153
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000610:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000614:	e009      	b.n	800062a <USART_DeInit+0x76>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:157
  }    
  else
  {
    if (USARTx == UART5)
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <USART_DeInit+0x94>)
 8000618:	4298      	cmp	r0, r3
 800061a:	d10b      	bne.n	8000634 <USART_DeInit+0x80>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:159
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800061c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000620:	2101      	movs	r1, #1
 8000622:	f7ff ffbb 	bl	800059c <RCC_APB1PeriphResetCmd>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:160
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000626:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800062a:	2100      	movs	r1, #0
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:163
    }
  }
}
 800062c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:160
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000630:	f7ff bfb4 	b.w	800059c <RCC_APB1PeriphResetCmd>
 8000634:	bd08      	pop	{r3, pc}
 8000636:	bf00      	nop
 8000638:	40013800 	.word	0x40013800
 800063c:	40004400 	.word	0x40004400
 8000640:	40004800 	.word	0x40004800
 8000644:	40004c00 	.word	0x40004c00
 8000648:	40005000 	.word	0x40005000

0800064c <USART_Init>:
USART_Init():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:200
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800064c:	8a03      	ldrh	r3, [r0, #16]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:205
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800064e:	88ca      	ldrh	r2, [r1, #6]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:200
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000650:	b29b      	uxth	r3, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:202
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:205
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000656:	4313      	orrs	r3, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000658:	b530      	push	{r4, r5, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:208
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800065a:	8203      	strh	r3, [r0, #16]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800065c:	460d      	mov	r5, r1
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:211
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800065e:	8982      	ldrh	r2, [r0, #12]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:218
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000660:	8909      	ldrh	r1, [r1, #8]
 8000662:	88ab      	ldrh	r3, [r5, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:211
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000664:	b292      	uxth	r2, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:218
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000666:	430b      	orrs	r3, r1
 8000668:	8969      	ldrh	r1, [r5, #10]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:213
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800066a:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:218
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800066e:	430b      	orrs	r3, r1
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:213
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000670:	f022 020c 	bic.w	r2, r2, #12
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:218
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000674:	4313      	orrs	r3, r2
 8000676:	b29b      	uxth	r3, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:221
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000678:	8183      	strh	r3, [r0, #12]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:224

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800067a:	8a83      	ldrh	r3, [r0, #20]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:229
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800067c:	89aa      	ldrh	r2, [r5, #12]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:224
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800067e:	b29b      	uxth	r3, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:226
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000684:	b087      	sub	sp, #28
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:229
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000686:	4313      	orrs	r3, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:177
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000688:	4604      	mov	r4, r0
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:231
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800068a:	8283      	strh	r3, [r0, #20]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:235

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800068c:	a801      	add	r0, sp, #4
 800068e:	f7ff ff1d 	bl	80004cc <RCC_GetClocksFreq>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:238
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000692:	4917      	ldr	r1, [pc, #92]	; (80006f0 <USART_Init+0xa4>)
 8000694:	9a04      	ldr	r2, [sp, #16]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:242
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000696:	9b03      	ldr	r3, [sp, #12]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:238
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000698:	428c      	cmp	r4, r1
 800069a:	bf08      	it	eq
 800069c:	4613      	moveq	r3, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:246
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800069e:	89a2      	ldrh	r2, [r4, #12]
 80006a0:	2119      	movs	r1, #25
 80006a2:	b212      	sxth	r2, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:249
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80006a4:	4359      	muls	r1, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:246
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	682a      	ldr	r2, [r5, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:256
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80006aa:	f04f 0364 	mov.w	r3, #100	; 0x64
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:249
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80006ae:	bfb4      	ite	lt
 80006b0:	0052      	lsllt	r2, r2, #1
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:254
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80006b2:	0092      	lslge	r2, r2, #2
 80006b4:	fbb1 f1f2 	udiv	r1, r1, r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:256
  }
  tmpreg = (integerdivider / 100) << 4;
 80006b8:	fbb1 f2f3 	udiv	r2, r1, r3
 80006bc:	0112      	lsls	r2, r2, #4
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:259

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80006be:	0910      	lsrs	r0, r2, #4
 80006c0:	fb03 1110 	mls	r1, r3, r0, r1
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:262

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80006c4:	89a0      	ldrh	r0, [r4, #12]
 80006c6:	b200      	sxth	r0, r0
 80006c8:	2800      	cmp	r0, #0
 80006ca:	da06      	bge.n	80006da <USART_Init+0x8e>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:264
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80006cc:	00c9      	lsls	r1, r1, #3
 80006ce:	3132      	adds	r1, #50	; 0x32
 80006d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006d4:	f003 0307 	and.w	r3, r3, #7
 80006d8:	e005      	b.n	80006e6 <USART_Init+0x9a>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:268
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80006da:	0109      	lsls	r1, r1, #4
 80006dc:	3132      	adds	r1, #50	; 0x32
 80006de:	fbb1 f3f3 	udiv	r3, r1, r3
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	431a      	orrs	r2, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:272
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80006e8:	b292      	uxth	r2, r2
 80006ea:	8122      	strh	r2, [r4, #8]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:273
}
 80006ec:	b007      	add	sp, #28
 80006ee:	bd30      	pop	{r4, r5, pc}
 80006f0:	40013800 	.word	0x40013800

080006f4 <USART_Cmd>:
USART_Cmd():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:360
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80006f4:	8983      	ldrh	r3, [r0, #12]
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:357
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006f6:	b119      	cbz	r1, 8000700 <USART_Cmd+0xc>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:360
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006fe:	e003      	b.n	8000708 <USART_Cmd+0x14>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:365
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000704:	041b      	lsls	r3, r3, #16
 8000706:	0c1b      	lsrs	r3, r3, #16
 8000708:	8183      	strh	r3, [r0, #12]
 800070a:	4770      	bx	lr

0800070c <USART_DMACmd>:
USART_DMACmd():
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:458
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800070c:	8a83      	ldrh	r3, [r0, #20]
 800070e:	b29b      	uxth	r3, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:454
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8000710:	b10a      	cbz	r2, 8000716 <USART_DMACmd+0xa>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:458
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000712:	4319      	orrs	r1, r3
 8000714:	e001      	b.n	800071a <USART_DMACmd+0xe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/StdPeriph/src/stm32f10x_usart.c:464
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8000716:	ea23 0101 	bic.w	r1, r3, r1
 800071a:	8281      	strh	r1, [r0, #20]
 800071c:	4770      	bx	lr
	...

08000720 <__libc_init_array>:
__libc_init_array():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8000720:	b570      	push	{r4, r5, r6, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <__libc_init_array+0x38>)
 8000724:	4d0d      	ldr	r5, [pc, #52]	; (800075c <__libc_init_array+0x3c>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 8000726:	2400      	movs	r4, #0
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:183
__libc_init_array(void)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 8000728:	1aed      	subs	r5, r5, r3
 800072a:	10ad      	asrs	r5, r5, #2
 800072c:	461e      	mov	r6, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:184 (discriminator 1)
  for (i = 0; i < count; i++)
 800072e:	42ac      	cmp	r4, r5
 8000730:	d004      	beq.n	800073c <__libc_init_array+0x1c>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:185 (discriminator 2)
    __preinit_array_start[i]();
 8000732:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000736:	4790      	blx	r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:184 (discriminator 2)
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8000738:	3401      	adds	r4, #1
 800073a:	e7f8      	b.n	800072e <__libc_init_array+0xe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <__libc_init_array+0x40>)
 800073e:	4d09      	ldr	r5, [pc, #36]	; (8000764 <__libc_init_array+0x44>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 8000740:	2400      	movs	r4, #0
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 8000742:	1aed      	subs	r5, r5, r3
 8000744:	10ad      	asrs	r5, r5, #2
 8000746:	461e      	mov	r6, r3
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:193 (discriminator 1)
  for (i = 0; i < count; i++)
 8000748:	42ac      	cmp	r4, r5
 800074a:	d004      	beq.n	8000756 <__libc_init_array+0x36>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:194 (discriminator 2)
    __init_array_start[i]();
 800074c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000750:	4790      	blx	r2
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:193 (discriminator 2)
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8000752:	3401      	adds	r4, #1
 8000754:	e7f8      	b.n	8000748 <__libc_init_array+0x28>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	08000178 	.word	0x08000178
 800075c:	0800017c 	.word	0x0800017c
 8000760:	0800017c 	.word	0x0800017c
 8000764:	0800017c 	.word	0x0800017c

08000768 <__libc_fini_array>:
__libc_fini_array():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 8000768:	b538      	push	{r3, r4, r5, lr}
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 800076a:	4d06      	ldr	r5, [pc, #24]	; (8000784 <__libc_fini_array+0x1c>)
 800076c:	4c06      	ldr	r4, [pc, #24]	; (8000788 <__libc_fini_array+0x20>)
 800076e:	1b64      	subs	r4, r4, r5
 8000770:	10a4      	asrs	r4, r4, #2
 8000772:	eb05 0584 	add.w	r5, r5, r4, lsl #2
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:205 (discriminator 1)
  for (i = count; i > 0; i--)
 8000776:	b124      	cbz	r4, 8000782 <__libc_fini_array+0x1a>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:206 (discriminator 2)
    __fini_array_start[i - 1]();
 8000778:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800077c:	3c01      	subs	r4, #1
 800077e:	4798      	blx	r3
 8000780:	e7f9      	b.n	8000776 <__libc_fini_array+0xe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 8000782:	bd38      	pop	{r3, r4, r5, pc}
 8000784:	0800017c 	.word	0x0800017c
 8000788:	0800017c 	.word	0x0800017c

0800078c <_exit>:
NVIC_SystemReset():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/include/core_cm3.h:1722
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <_exit+0x14>)
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <_exit+0x18>)
 8000790:	68d1      	ldr	r1, [r2, #12]
 8000792:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
 8000796:	430b      	orrs	r3, r1
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/include/core_cm3.h:1721
 *
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8000798:	60d3      	str	r3, [r2, #12]
__DSB():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/include/core_cm3.h:1215
static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	e7fe      	b.n	800079e <_exit+0x12>
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	05fa0004 	.word	0x05fa0004

080007a8 <SystemInit>:
SystemInit():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:216
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <SystemInit+0xe4>)
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:213
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007aa:	b082      	sub	sp, #8
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:216
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f042 0201 	orr.w	r2, r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:220

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80007b4:	6859      	ldr	r1, [r3, #4]
 80007b6:	4a36      	ldr	r2, [pc, #216]	; (8000890 <SystemInit+0xe8>)
 80007b8:	400a      	ands	r2, r1
 80007ba:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:226
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80007c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007c6:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:229

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007ce:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:232

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80007d6:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:251

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80007d8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007dc:	609a      	str	r2, [r3, #8]
SetSysClockTo72():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:989
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007de:	2200      	movs	r2, #0
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9201      	str	r2, [sp, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:993
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007ea:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:998
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80007f2:	9201      	str	r2, [sp, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:999
    StartUpCounter++;  
 80007f4:	9a00      	ldr	r2, [sp, #0]
 80007f6:	3201      	adds	r2, #1
 80007f8:	9200      	str	r2, [sp, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1000
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007fa:	9a01      	ldr	r2, [sp, #4]
 80007fc:	b91a      	cbnz	r2, 8000806 <SystemInit+0x5e>
 80007fe:	9a00      	ldr	r2, [sp, #0]
 8000800:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000804:	d1f2      	bne.n	80007ec <SystemInit+0x44>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1002

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1004
  {
    HSEStatus = (uint32_t)0x01;
 800080c:	bf18      	it	ne
 800080e:	2201      	movne	r2, #1
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1008
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000810:	9201      	str	r2, [sp, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1011
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000812:	9a01      	ldr	r2, [sp, #4]
 8000814:	2a01      	cmp	r2, #1
 8000816:	d005      	beq.n	8000824 <SystemInit+0x7c>
SystemInit():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:267
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <SystemInit+0xec>)
 800081a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081e:	609a      	str	r2, [r3, #8]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:269
#endif 
}
 8000820:	b002      	add	sp, #8
 8000822:	4770      	bx	lr
SetSysClockTo72():
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1014
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000824:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <SystemInit+0xf0>)
 8000826:	6811      	ldr	r1, [r2, #0]
 8000828:	f041 0110 	orr.w	r1, r1, #16
 800082c:	6011      	str	r1, [r2, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1017

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800082e:	6811      	ldr	r1, [r2, #0]
 8000830:	f021 0103 	bic.w	r1, r1, #3
 8000834:	6011      	str	r1, [r2, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1018
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000836:	6811      	ldr	r1, [r2, #0]
 8000838:	f041 0102 	orr.w	r1, r1, #2
 800083c:	6011      	str	r1, [r2, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1022

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1025
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1028
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800084c:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1054
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000854:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1056
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800085c:	605a      	str	r2, [r3, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1060
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000864:	601a      	str	r2, [r3, #0]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1063

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <SystemInit+0xe4>)
 800086a:	0189      	lsls	r1, r1, #6
 800086c:	d5fb      	bpl.n	8000866 <SystemInit+0xbe>
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1068
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800086e:	6851      	ldr	r1, [r2, #4]
 8000870:	f021 0103 	bic.w	r1, r1, #3
 8000874:	6051      	str	r1, [r2, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1069
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000876:	6851      	ldr	r1, [r2, #4]
 8000878:	f041 0102 	orr.w	r1, r1, #2
 800087c:	6051      	str	r1, [r2, #4]
/home/kartik/workspaceSTM32/stepper/Release/../libs/CMSIS/src/system_stm32f10x.c:1072

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	f002 020c 	and.w	r2, r2, #12
 8000884:	2a08      	cmp	r2, #8
 8000886:	d1fa      	bne.n	800087e <SystemInit+0xd6>
 8000888:	e7c6      	b.n	8000818 <SystemInit+0x70>
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	f8ff0000 	.word	0xf8ff0000
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	40022000 	.word	0x40022000

0800089c <__aeabi_drsub>:
$t():
 800089c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80008a0:	e002      	b.n	80008a8 <__adddf3>
 80008a2:	bf00      	nop

080008a4 <__aeabi_dsub>:
__aeabi_dsub():
 80008a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080008a8 <__adddf3>:
 80008a8:	b530      	push	{r4, r5, lr}
 80008aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80008ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80008b2:	ea94 0f05 	teq	r4, r5
 80008b6:	bf08      	it	eq
 80008b8:	ea90 0f02 	teqeq	r0, r2
 80008bc:	bf1f      	itttt	ne
 80008be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80008c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80008c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80008ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008ce:	f000 80e2 	beq.w	8000a96 <__adddf3+0x1ee>
 80008d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80008d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80008da:	bfb8      	it	lt
 80008dc:	426d      	neglt	r5, r5
 80008de:	dd0c      	ble.n	80008fa <__adddf3+0x52>
 80008e0:	442c      	add	r4, r5
 80008e2:	ea80 0202 	eor.w	r2, r0, r2
 80008e6:	ea81 0303 	eor.w	r3, r1, r3
 80008ea:	ea82 0000 	eor.w	r0, r2, r0
 80008ee:	ea83 0101 	eor.w	r1, r3, r1
 80008f2:	ea80 0202 	eor.w	r2, r0, r2
 80008f6:	ea81 0303 	eor.w	r3, r1, r3
 80008fa:	2d36      	cmp	r5, #54	; 0x36
 80008fc:	bf88      	it	hi
 80008fe:	bd30      	pophi	{r4, r5, pc}
 8000900:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000904:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000908:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800090c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000910:	d002      	beq.n	8000918 <__adddf3+0x70>
 8000912:	4240      	negs	r0, r0
 8000914:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000918:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800091c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000920:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000924:	d002      	beq.n	800092c <__adddf3+0x84>
 8000926:	4252      	negs	r2, r2
 8000928:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092c:	ea94 0f05 	teq	r4, r5
 8000930:	f000 80a7 	beq.w	8000a82 <__adddf3+0x1da>
 8000934:	f1a4 0401 	sub.w	r4, r4, #1
 8000938:	f1d5 0e20 	rsbs	lr, r5, #32
 800093c:	db0d      	blt.n	800095a <__adddf3+0xb2>
 800093e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000942:	fa22 f205 	lsr.w	r2, r2, r5
 8000946:	1880      	adds	r0, r0, r2
 8000948:	f141 0100 	adc.w	r1, r1, #0
 800094c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000950:	1880      	adds	r0, r0, r2
 8000952:	fa43 f305 	asr.w	r3, r3, r5
 8000956:	4159      	adcs	r1, r3
 8000958:	e00e      	b.n	8000978 <__adddf3+0xd0>
 800095a:	f1a5 0520 	sub.w	r5, r5, #32
 800095e:	f10e 0e20 	add.w	lr, lr, #32
 8000962:	2a01      	cmp	r2, #1
 8000964:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000968:	bf28      	it	cs
 800096a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800096e:	fa43 f305 	asr.w	r3, r3, r5
 8000972:	18c0      	adds	r0, r0, r3
 8000974:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800097c:	d507      	bpl.n	800098e <__adddf3+0xe6>
 800097e:	f04f 0e00 	mov.w	lr, #0
 8000982:	f1dc 0c00 	rsbs	ip, ip, #0
 8000986:	eb7e 0000 	sbcs.w	r0, lr, r0
 800098a:	eb6e 0101 	sbc.w	r1, lr, r1
 800098e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000992:	d31b      	bcc.n	80009cc <__adddf3+0x124>
 8000994:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000998:	d30c      	bcc.n	80009b4 <__adddf3+0x10c>
 800099a:	0849      	lsrs	r1, r1, #1
 800099c:	ea5f 0030 	movs.w	r0, r0, rrx
 80009a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80009a4:	f104 0401 	add.w	r4, r4, #1
 80009a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80009ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80009b0:	f080 809a 	bcs.w	8000ae8 <__adddf3+0x240>
 80009b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009b8:	bf08      	it	eq
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	ea41 0105 	orr.w	r1, r1, r5
 80009ca:	bd30      	pop	{r4, r5, pc}
 80009cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80009d0:	4140      	adcs	r0, r0
 80009d2:	eb41 0101 	adc.w	r1, r1, r1
 80009d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009da:	f1a4 0401 	sub.w	r4, r4, #1
 80009de:	d1e9      	bne.n	80009b4 <__adddf3+0x10c>
 80009e0:	f091 0f00 	teq	r1, #0
 80009e4:	bf04      	itt	eq
 80009e6:	4601      	moveq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	fab1 f381 	clz	r3, r1
 80009ee:	bf08      	it	eq
 80009f0:	3320      	addeq	r3, #32
 80009f2:	f1a3 030b 	sub.w	r3, r3, #11
 80009f6:	f1b3 0220 	subs.w	r2, r3, #32
 80009fa:	da0c      	bge.n	8000a16 <__adddf3+0x16e>
 80009fc:	320c      	adds	r2, #12
 80009fe:	dd08      	ble.n	8000a12 <__adddf3+0x16a>
 8000a00:	f102 0c14 	add.w	ip, r2, #20
 8000a04:	f1c2 020c 	rsb	r2, r2, #12
 8000a08:	fa01 f00c 	lsl.w	r0, r1, ip
 8000a0c:	fa21 f102 	lsr.w	r1, r1, r2
 8000a10:	e00c      	b.n	8000a2c <__adddf3+0x184>
 8000a12:	f102 0214 	add.w	r2, r2, #20
 8000a16:	bfd8      	it	le
 8000a18:	f1c2 0c20 	rsble	ip, r2, #32
 8000a1c:	fa01 f102 	lsl.w	r1, r1, r2
 8000a20:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a24:	bfdc      	itt	le
 8000a26:	ea41 010c 	orrle.w	r1, r1, ip
 8000a2a:	4090      	lslle	r0, r2
 8000a2c:	1ae4      	subs	r4, r4, r3
 8000a2e:	bfa2      	ittt	ge
 8000a30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000a34:	4329      	orrge	r1, r5
 8000a36:	bd30      	popge	{r4, r5, pc}
 8000a38:	ea6f 0404 	mvn.w	r4, r4
 8000a3c:	3c1f      	subs	r4, #31
 8000a3e:	da1c      	bge.n	8000a7a <__adddf3+0x1d2>
 8000a40:	340c      	adds	r4, #12
 8000a42:	dc0e      	bgt.n	8000a62 <__adddf3+0x1ba>
 8000a44:	f104 0414 	add.w	r4, r4, #20
 8000a48:	f1c4 0220 	rsb	r2, r4, #32
 8000a4c:	fa20 f004 	lsr.w	r0, r0, r4
 8000a50:	fa01 f302 	lsl.w	r3, r1, r2
 8000a54:	ea40 0003 	orr.w	r0, r0, r3
 8000a58:	fa21 f304 	lsr.w	r3, r1, r4
 8000a5c:	ea45 0103 	orr.w	r1, r5, r3
 8000a60:	bd30      	pop	{r4, r5, pc}
 8000a62:	f1c4 040c 	rsb	r4, r4, #12
 8000a66:	f1c4 0220 	rsb	r2, r4, #32
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	fa01 f304 	lsl.w	r3, r1, r4
 8000a72:	ea40 0003 	orr.w	r0, r0, r3
 8000a76:	4629      	mov	r1, r5
 8000a78:	bd30      	pop	{r4, r5, pc}
 8000a7a:	fa21 f004 	lsr.w	r0, r1, r4
 8000a7e:	4629      	mov	r1, r5
 8000a80:	bd30      	pop	{r4, r5, pc}
 8000a82:	f094 0f00 	teq	r4, #0
 8000a86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000a8a:	bf06      	itte	eq
 8000a8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000a90:	3401      	addeq	r4, #1
 8000a92:	3d01      	subne	r5, #1
 8000a94:	e74e      	b.n	8000934 <__adddf3+0x8c>
 8000a96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a9a:	bf18      	it	ne
 8000a9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000aa0:	d029      	beq.n	8000af6 <__adddf3+0x24e>
 8000aa2:	ea94 0f05 	teq	r4, r5
 8000aa6:	bf08      	it	eq
 8000aa8:	ea90 0f02 	teqeq	r0, r2
 8000aac:	d005      	beq.n	8000aba <__adddf3+0x212>
 8000aae:	ea54 0c00 	orrs.w	ip, r4, r0
 8000ab2:	bf04      	itt	eq
 8000ab4:	4619      	moveq	r1, r3
 8000ab6:	4610      	moveq	r0, r2
 8000ab8:	bd30      	pop	{r4, r5, pc}
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf1e      	ittt	ne
 8000ac0:	2100      	movne	r1, #0
 8000ac2:	2000      	movne	r0, #0
 8000ac4:	bd30      	popne	{r4, r5, pc}
 8000ac6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000aca:	d105      	bne.n	8000ad8 <__adddf3+0x230>
 8000acc:	0040      	lsls	r0, r0, #1
 8000ace:	4149      	adcs	r1, r1
 8000ad0:	bf28      	it	cs
 8000ad2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000ad6:	bd30      	pop	{r4, r5, pc}
 8000ad8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000adc:	bf3c      	itt	cc
 8000ade:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000ae2:	bd30      	popcc	{r4, r5, pc}
 8000ae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000ae8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000aec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	bd30      	pop	{r4, r5, pc}
 8000af6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000afa:	bf1a      	itte	ne
 8000afc:	4619      	movne	r1, r3
 8000afe:	4610      	movne	r0, r2
 8000b00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000b04:	bf1c      	itt	ne
 8000b06:	460b      	movne	r3, r1
 8000b08:	4602      	movne	r2, r0
 8000b0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b0e:	bf06      	itte	eq
 8000b10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000b14:	ea91 0f03 	teqeq	r1, r3
 8000b18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000b1c:	bd30      	pop	{r4, r5, pc}
__adddf3():
 8000b1e:	bf00      	nop

08000b20 <__aeabi_ui2d>:
__aeabi_ui2d():
 8000b20:	f090 0f00 	teq	r0, #0
 8000b24:	bf04      	itt	eq
 8000b26:	2100      	moveq	r1, #0
 8000b28:	4770      	bxeq	lr
 8000b2a:	b530      	push	{r4, r5, lr}
 8000b2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b30:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b34:	f04f 0500 	mov.w	r5, #0
 8000b38:	f04f 0100 	mov.w	r1, #0
 8000b3c:	e750      	b.n	80009e0 <__adddf3+0x138>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2d>:
__floatsidf():
 8000b40:	f090 0f00 	teq	r0, #0
 8000b44:	bf04      	itt	eq
 8000b46:	2100      	moveq	r1, #0
 8000b48:	4770      	bxeq	lr
 8000b4a:	b530      	push	{r4, r5, lr}
 8000b4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000b58:	bf48      	it	mi
 8000b5a:	4240      	negmi	r0, r0
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	e73e      	b.n	80009e0 <__adddf3+0x138>
 8000b62:	bf00      	nop

08000b64 <__aeabi_f2d>:
__extendsfdf2():
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000b72:	bf1f      	itttt	ne
 8000b74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000b78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000b7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000b80:	4770      	bxne	lr
 8000b82:	f092 0f00 	teq	r2, #0
 8000b86:	bf14      	ite	ne
 8000b88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000b8c:	4770      	bxeq	lr
 8000b8e:	b530      	push	{r4, r5, lr}
 8000b90:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b9c:	e720      	b.n	80009e0 <__adddf3+0x138>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_ul2d>:
__aeabi_ul2d():
 8000ba0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba4:	bf08      	it	eq
 8000ba6:	4770      	bxeq	lr
 8000ba8:	b530      	push	{r4, r5, lr}
 8000baa:	f04f 0500 	mov.w	r5, #0
 8000bae:	e00a      	b.n	8000bc6 <__aeabi_l2d+0x16>

08000bb0 <__aeabi_l2d>:
 8000bb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb4:	bf08      	it	eq
 8000bb6:	4770      	bxeq	lr
 8000bb8:	b530      	push	{r4, r5, lr}
 8000bba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000bbe:	d502      	bpl.n	8000bc6 <__aeabi_l2d+0x16>
 8000bc0:	4240      	negs	r0, r0
 8000bc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000bca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000bce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000bd2:	f43f aedc 	beq.w	800098e <__adddf3+0xe6>
 8000bd6:	f04f 0203 	mov.w	r2, #3
 8000bda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000bde:	bf18      	it	ne
 8000be0:	3203      	addne	r2, #3
 8000be2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000be6:	bf18      	it	ne
 8000be8:	3203      	addne	r2, #3
 8000bea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	fa01 fe03 	lsl.w	lr, r1, r3
 8000bfe:	ea40 000e 	orr.w	r0, r0, lr
 8000c02:	fa21 f102 	lsr.w	r1, r1, r2
 8000c06:	4414      	add	r4, r2
 8000c08:	e6c1      	b.n	800098e <__adddf3+0xe6>
__floatdidf():
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dmul>:
__aeabi_dmul():
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c1a:	bf1d      	ittte	ne
 8000c1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c20:	ea94 0f0c 	teqne	r4, ip
 8000c24:	ea95 0f0c 	teqne	r5, ip
 8000c28:	f000 f8de 	bleq	8000de8 <__aeabi_dmul+0x1dc>
 8000c2c:	442c      	add	r4, r5
 8000c2e:	ea81 0603 	eor.w	r6, r1, r3
 8000c32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000c36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000c3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000c3e:	bf18      	it	ne
 8000c40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c4c:	d038      	beq.n	8000cc0 <__aeabi_dmul+0xb4>
 8000c4e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000c52:	f04f 0500 	mov.w	r5, #0
 8000c56:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000c5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000c5e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000c62:	f04f 0600 	mov.w	r6, #0
 8000c66:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000c6a:	f09c 0f00 	teq	ip, #0
 8000c6e:	bf18      	it	ne
 8000c70:	f04e 0e01 	orrne.w	lr, lr, #1
 8000c74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000c78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000c7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000c80:	d204      	bcs.n	8000c8c <__aeabi_dmul+0x80>
 8000c82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000c86:	416d      	adcs	r5, r5
 8000c88:	eb46 0606 	adc.w	r6, r6, r6
 8000c8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000c90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000c94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000c98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000ca0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ca4:	bf88      	it	hi
 8000ca6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000caa:	d81e      	bhi.n	8000cea <__aeabi_dmul+0xde>
 8000cac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000cb0:	bf08      	it	eq
 8000cb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000cb6:	f150 0000 	adcs.w	r0, r0, #0
 8000cba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000cc4:	ea46 0101 	orr.w	r1, r6, r1
 8000cc8:	ea40 0002 	orr.w	r0, r0, r2
 8000ccc:	ea81 0103 	eor.w	r1, r1, r3
 8000cd0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000cd4:	bfc2      	ittt	gt
 8000cd6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cde:	bd70      	popgt	{r4, r5, r6, pc}
 8000ce0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ce4:	f04f 0e00 	mov.w	lr, #0
 8000ce8:	3c01      	subs	r4, #1
 8000cea:	f300 80ab 	bgt.w	8000e44 <__aeabi_dmul+0x238>
 8000cee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000cf2:	bfde      	ittt	le
 8000cf4:	2000      	movle	r0, #0
 8000cf6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000cfa:	bd70      	pople	{r4, r5, r6, pc}
 8000cfc:	f1c4 0400 	rsb	r4, r4, #0
 8000d00:	3c20      	subs	r4, #32
 8000d02:	da35      	bge.n	8000d70 <__aeabi_dmul+0x164>
 8000d04:	340c      	adds	r4, #12
 8000d06:	dc1b      	bgt.n	8000d40 <__aeabi_dmul+0x134>
 8000d08:	f104 0414 	add.w	r4, r4, #20
 8000d0c:	f1c4 0520 	rsb	r5, r4, #32
 8000d10:	fa00 f305 	lsl.w	r3, r0, r5
 8000d14:	fa20 f004 	lsr.w	r0, r0, r4
 8000d18:	fa01 f205 	lsl.w	r2, r1, r5
 8000d1c:	ea40 0002 	orr.w	r0, r0, r2
 8000d20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000d24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000d28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d2c:	fa21 f604 	lsr.w	r6, r1, r4
 8000d30:	eb42 0106 	adc.w	r1, r2, r6
 8000d34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
 8000d40:	f1c4 040c 	rsb	r4, r4, #12
 8000d44:	f1c4 0520 	rsb	r5, r4, #32
 8000d48:	fa00 f304 	lsl.w	r3, r0, r4
 8000d4c:	fa20 f005 	lsr.w	r0, r0, r5
 8000d50:	fa01 f204 	lsl.w	r2, r1, r4
 8000d54:	ea40 0002 	orr.w	r0, r0, r2
 8000d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d60:	f141 0100 	adc.w	r1, r1, #0
 8000d64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d68:	bf08      	it	eq
 8000d6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d6e:	bd70      	pop	{r4, r5, r6, pc}
 8000d70:	f1c4 0520 	rsb	r5, r4, #32
 8000d74:	fa00 f205 	lsl.w	r2, r0, r5
 8000d78:	ea4e 0e02 	orr.w	lr, lr, r2
 8000d7c:	fa20 f304 	lsr.w	r3, r0, r4
 8000d80:	fa01 f205 	lsl.w	r2, r1, r5
 8000d84:	ea43 0302 	orr.w	r3, r3, r2
 8000d88:	fa21 f004 	lsr.w	r0, r1, r4
 8000d8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d90:	fa21 f204 	lsr.w	r2, r1, r4
 8000d94:	ea20 0002 	bic.w	r0, r0, r2
 8000d98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000da0:	bf08      	it	eq
 8000da2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f094 0f00 	teq	r4, #0
 8000dac:	d10f      	bne.n	8000dce <__aeabi_dmul+0x1c2>
 8000dae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000db2:	0040      	lsls	r0, r0, #1
 8000db4:	eb41 0101 	adc.w	r1, r1, r1
 8000db8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000dbc:	bf08      	it	eq
 8000dbe:	3c01      	subeq	r4, #1
 8000dc0:	d0f7      	beq.n	8000db2 <__aeabi_dmul+0x1a6>
 8000dc2:	ea41 0106 	orr.w	r1, r1, r6
 8000dc6:	f095 0f00 	teq	r5, #0
 8000dca:	bf18      	it	ne
 8000dcc:	4770      	bxne	lr
 8000dce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000dd2:	0052      	lsls	r2, r2, #1
 8000dd4:	eb43 0303 	adc.w	r3, r3, r3
 8000dd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ddc:	bf08      	it	eq
 8000dde:	3d01      	subeq	r5, #1
 8000de0:	d0f7      	beq.n	8000dd2 <__aeabi_dmul+0x1c6>
 8000de2:	ea43 0306 	orr.w	r3, r3, r6
 8000de6:	4770      	bx	lr
 8000de8:	ea94 0f0c 	teq	r4, ip
 8000dec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000df0:	bf18      	it	ne
 8000df2:	ea95 0f0c 	teqne	r5, ip
 8000df6:	d00c      	beq.n	8000e12 <__aeabi_dmul+0x206>
 8000df8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000dfc:	bf18      	it	ne
 8000dfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e02:	d1d1      	bne.n	8000da8 <__aeabi_dmul+0x19c>
 8000e04:	ea81 0103 	eor.w	r1, r1, r3
 8000e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e0c:	f04f 0000 	mov.w	r0, #0
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
 8000e12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e16:	bf06      	itte	eq
 8000e18:	4610      	moveq	r0, r2
 8000e1a:	4619      	moveq	r1, r3
 8000e1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e20:	d019      	beq.n	8000e56 <__aeabi_dmul+0x24a>
 8000e22:	ea94 0f0c 	teq	r4, ip
 8000e26:	d102      	bne.n	8000e2e <__aeabi_dmul+0x222>
 8000e28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000e2c:	d113      	bne.n	8000e56 <__aeabi_dmul+0x24a>
 8000e2e:	ea95 0f0c 	teq	r5, ip
 8000e32:	d105      	bne.n	8000e40 <__aeabi_dmul+0x234>
 8000e34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000e38:	bf1c      	itt	ne
 8000e3a:	4610      	movne	r0, r2
 8000e3c:	4619      	movne	r1, r3
 8000e3e:	d10a      	bne.n	8000e56 <__aeabi_dmul+0x24a>
 8000e40:	ea81 0103 	eor.w	r1, r1, r3
 8000e44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000e4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e50:	f04f 0000 	mov.w	r0, #0
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000e5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}

08000e60 <__aeabi_ddiv>:
__aeabi_ddiv():
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e6e:	bf1d      	ittte	ne
 8000e70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000e74:	ea94 0f0c 	teqne	r4, ip
 8000e78:	ea95 0f0c 	teqne	r5, ip
 8000e7c:	f000 f8a7 	bleq	8000fce <__aeabi_ddiv+0x16e>
 8000e80:	eba4 0405 	sub.w	r4, r4, r5
 8000e84:	ea81 0e03 	eor.w	lr, r1, r3
 8000e88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000e90:	f000 8088 	beq.w	8000fa4 <__aeabi_ddiv+0x144>
 8000e94:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000e9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ea0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ea4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ea8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000eac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000eb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000eb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000eb8:	429d      	cmp	r5, r3
 8000eba:	bf08      	it	eq
 8000ebc:	4296      	cmpeq	r6, r2
 8000ebe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ec2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ec6:	d202      	bcs.n	8000ece <__aeabi_ddiv+0x6e>
 8000ec8:	085b      	lsrs	r3, r3, #1
 8000eca:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ece:	1ab6      	subs	r6, r6, r2
 8000ed0:	eb65 0503 	sbc.w	r5, r5, r3
 8000ed4:	085b      	lsrs	r3, r3, #1
 8000ed6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000eda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ede:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ee2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ee6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000eea:	bf22      	ittt	cs
 8000eec:	1ab6      	subcs	r6, r6, r2
 8000eee:	4675      	movcs	r5, lr
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000efa:	ebb6 0e02 	subs.w	lr, r6, r2
 8000efe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f02:	bf22      	ittt	cs
 8000f04:	1ab6      	subcs	r6, r6, r2
 8000f06:	4675      	movcs	r5, lr
 8000f08:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f12:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f1a:	bf22      	ittt	cs
 8000f1c:	1ab6      	subcs	r6, r6, r2
 8000f1e:	4675      	movcs	r5, lr
 8000f20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f24:	085b      	lsrs	r3, r3, #1
 8000f26:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f2a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f32:	bf22      	ittt	cs
 8000f34:	1ab6      	subcs	r6, r6, r2
 8000f36:	4675      	movcs	r5, lr
 8000f38:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000f40:	d018      	beq.n	8000f74 <__aeabi_ddiv+0x114>
 8000f42:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000f46:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000f4a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000f4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000f52:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000f56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000f5a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000f5e:	d1c0      	bne.n	8000ee2 <__aeabi_ddiv+0x82>
 8000f60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f64:	d10b      	bne.n	8000f7e <__aeabi_ddiv+0x11e>
 8000f66:	ea41 0100 	orr.w	r1, r1, r0
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000f72:	e7b6      	b.n	8000ee2 <__aeabi_ddiv+0x82>
 8000f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f78:	bf04      	itt	eq
 8000f7a:	4301      	orreq	r1, r0
 8000f7c:	2000      	moveq	r0, #0
 8000f7e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000f82:	bf88      	it	hi
 8000f84:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000f88:	f63f aeaf 	bhi.w	8000cea <__aeabi_dmul+0xde>
 8000f8c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000f90:	bf04      	itt	eq
 8000f92:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000f96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f9a:	f150 0000 	adcs.w	r0, r0, #0
 8000f9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000fa8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000fac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000fb0:	bfc2      	ittt	gt
 8000fb2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000fb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000fba:	bd70      	popgt	{r4, r5, r6, pc}
 8000fbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000fc0:	f04f 0e00 	mov.w	lr, #0
 8000fc4:	3c01      	subs	r4, #1
 8000fc6:	e690      	b.n	8000cea <__aeabi_dmul+0xde>
 8000fc8:	ea45 0e06 	orr.w	lr, r5, r6
 8000fcc:	e68d      	b.n	8000cea <__aeabi_dmul+0xde>
 8000fce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000fd2:	ea94 0f0c 	teq	r4, ip
 8000fd6:	bf08      	it	eq
 8000fd8:	ea95 0f0c 	teqeq	r5, ip
 8000fdc:	f43f af3b 	beq.w	8000e56 <__aeabi_dmul+0x24a>
 8000fe0:	ea94 0f0c 	teq	r4, ip
 8000fe4:	d10a      	bne.n	8000ffc <__aeabi_ddiv+0x19c>
 8000fe6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000fea:	f47f af34 	bne.w	8000e56 <__aeabi_dmul+0x24a>
 8000fee:	ea95 0f0c 	teq	r5, ip
 8000ff2:	f47f af25 	bne.w	8000e40 <__aeabi_dmul+0x234>
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	e72c      	b.n	8000e56 <__aeabi_dmul+0x24a>
 8000ffc:	ea95 0f0c 	teq	r5, ip
 8001000:	d106      	bne.n	8001010 <__aeabi_ddiv+0x1b0>
 8001002:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001006:	f43f aefd 	beq.w	8000e04 <__aeabi_dmul+0x1f8>
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	e722      	b.n	8000e56 <__aeabi_dmul+0x24a>
 8001010:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001014:	bf18      	it	ne
 8001016:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800101a:	f47f aec5 	bne.w	8000da8 <__aeabi_dmul+0x19c>
 800101e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001022:	f47f af0d 	bne.w	8000e40 <__aeabi_dmul+0x234>
 8001026:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800102a:	f47f aeeb 	bne.w	8000e04 <__aeabi_dmul+0x1f8>
 800102e:	e712      	b.n	8000e56 <__aeabi_dmul+0x24a>

08001030 <__aeabi_d2iz>:
__fixdfsi():
 8001030:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001034:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001038:	d215      	bcs.n	8001066 <__aeabi_d2iz+0x36>
 800103a:	d511      	bpl.n	8001060 <__aeabi_d2iz+0x30>
 800103c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001040:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001044:	d912      	bls.n	800106c <__aeabi_d2iz+0x3c>
 8001046:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800104a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001052:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001056:	fa23 f002 	lsr.w	r0, r3, r2
 800105a:	bf18      	it	ne
 800105c:	4240      	negne	r0, r0
 800105e:	4770      	bx	lr
 8001060:	f04f 0000 	mov.w	r0, #0
 8001064:	4770      	bx	lr
 8001066:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800106a:	d105      	bne.n	8001078 <__aeabi_d2iz+0x48>
 800106c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001070:	bf08      	it	eq
 8001072:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001076:	4770      	bx	lr
 8001078:	f04f 0000 	mov.w	r0, #0
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
